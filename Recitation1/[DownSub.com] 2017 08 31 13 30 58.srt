1
00:00:26,630 --> 00:00:29,730
[Applause]

2
00:00:41,050 --> 00:00:44,170
[Applause]

3
00:01:04,480 --> 00:01:07,780
greetings everyone

4
00:01:13,930 --> 00:01:19,400
so<font color="#E5E5E5"> last time to sort of the introduction</font>

5
00:01:19,400 --> 00:01:21,710
<font color="#CCCCCC">to the course overview and</font><font color="#E5E5E5"> some of the</font>

6
00:01:21,710 --> 00:01:23,600
logistics today we'll get into<font color="#E5E5E5"> the real</font>

7
00:01:23,600 --> 00:01:26,600
<font color="#E5E5E5">content in general I'm not</font><font color="#CCCCCC"> going to</font>

8
00:01:26,600 --> 00:01:27,920
<font color="#E5E5E5">spend a lot of time in this course</font>

9
00:01:27,920 --> 00:01:30,530
<font color="#E5E5E5">making announcements and things but for</font>

10
00:01:30,530 --> 00:01:32,380
<font color="#E5E5E5">the first two I want to just make</font><font color="#CCCCCC"> sure</font>

11
00:01:32,380 --> 00:01:35,990
<font color="#E5E5E5">people are queer so as you know this</font>

12
00:01:35,990 --> 00:01:39,440
<font color="#E5E5E5">coming Monday is Labor Day and so</font>

13
00:01:39,440 --> 00:01:41,330
there's no classes<font color="#E5E5E5"> so therefore you</font>

14
00:01:41,330 --> 00:01:44,569
won't<font color="#E5E5E5"> have recitation sections but we</font>

15
00:01:44,569 --> 00:01:47,000
are scheduling<font color="#E5E5E5"> what we call a Linux boot</font>

16
00:01:47,000 --> 00:01:50,060
camp<font color="#CCCCCC"> on Monday</font><font color="#E5E5E5"> evening at 7:00</font><font color="#CCCCCC"> p.m. this</font>

17
00:01:50,060 --> 00:01:52,399
<font color="#CCCCCC">is completely optional if you have</font>

18
00:01:52,399 --> 00:01:56,119
experience in<font color="#CCCCCC"> linux or you know</font><font color="#E5E5E5"> command</font>

19
00:01:56,119 --> 00:01:59,750
<font color="#E5E5E5">line activities soon as soon</font><font color="#CCCCCC"> Erik how do</font>

20
00:01:59,750 --> 00:02:02,600
you get code to run how do you edit

21
00:02:02,600 --> 00:02:05,750
files<font color="#E5E5E5"> while you move files around will</font>

22
00:02:05,750 --> 00:02:07,909
be<font color="#CCCCCC"> covered</font><font color="#E5E5E5"> will also cover some</font><font color="#CCCCCC"> odd gift</font>

23
00:02:07,909 --> 00:02:10,639
because we're encouraging<font color="#E5E5E5"> you to</font><font color="#CCCCCC"> use git</font>

24
00:02:10,639 --> 00:02:14,390
<font color="#CCCCCC">server that's operated by ECE</font><font color="#E5E5E5"> and by the</font>

25
00:02:14,390 --> 00:02:17,840
way<font color="#E5E5E5"> people are various ways communique</font>

26
00:02:17,840 --> 00:02:20,360
us having trouble with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and the</font>

27
00:02:20,360 --> 00:02:23,510
honest truth is it's<font color="#E5E5E5"> not all set up yet</font>

28
00:02:23,510 --> 00:02:25,790
<font color="#E5E5E5">my</font><font color="#CCCCCC"> understanding</font><font color="#E5E5E5"> is the person in ECE</font>

29
00:02:25,790 --> 00:02:30,680
<font color="#E5E5E5">who runs that is a earning man and he</font>

30
00:02:30,680 --> 00:02:32,269
goes there every<font color="#E5E5E5"> year and they have this</font>

31
00:02:32,269 --> 00:02:35,030
same trouble<font color="#E5E5E5"> every year so oh wait he'll</font>

32
00:02:35,030 --> 00:02:37,900
have a really great<font color="#E5E5E5"> time there come</font><font color="#CCCCCC"> back</font>

33
00:02:37,900 --> 00:02:41,510
<font color="#CCCCCC">well-rested fix things up</font><font color="#E5E5E5"> you'll be</font>

34
00:02:41,510 --> 00:02:45,980
<font color="#CCCCCC">ready to go</font><font color="#E5E5E5"> hopefully</font><font color="#CCCCCC"> by the time of</font>

35
00:02:45,980 --> 00:02:51,920
<font color="#E5E5E5">this boot camp</font><font color="#CCCCCC"> Oh like I said this is a</font>

36
00:02:51,920 --> 00:02:54,620
won't<font color="#E5E5E5"> do over the</font><font color="#CCCCCC"> courses term a few of</font>

37
00:02:54,620 --> 00:02:56,959
these evening sessions<font color="#E5E5E5"> review sessions</font>

38
00:02:56,959 --> 00:02:58,820
<font color="#E5E5E5">none of these are mandatory at all</font>

39
00:02:58,820 --> 00:03:01,970
they're here to<font color="#E5E5E5"> help you we may or may</font>

40
00:03:01,970 --> 00:03:04,609
not record them<font color="#E5E5E5"> in video we will in all</font>

41
00:03:04,609 --> 00:03:07,489
cases<font color="#CCCCCC"> post whatever materials were</font>

42
00:03:07,489 --> 00:03:10,790
passed out<font color="#E5E5E5"> or used like</font><font color="#CCCCCC"> your slides or</font>

43
00:03:10,790 --> 00:03:12,739
code<font color="#E5E5E5"> examples or something like that</font>

44
00:03:12,739 --> 00:03:16,000
<font color="#E5E5E5">will be made available on</font><font color="#CCCCCC"> our website</font>

45
00:03:16,000 --> 00:03:18,739
<font color="#CCCCCC">also to mention as I mentioned last time</font>

46
00:03:18,739 --> 00:03:20,930
<font color="#E5E5E5">there is a new lab for this course</font>

47
00:03:20,930 --> 00:03:24,520
<font color="#CCCCCC">called lab</font><font color="#E5E5E5"> zero it's intended to be</font>

48
00:03:24,520 --> 00:03:28,680
a<font color="#E5E5E5"> walkthrough</font><font color="#CCCCCC"> of basic C programming</font>

49
00:03:28,680 --> 00:03:31,780
<font color="#E5E5E5">that hopefully you already are fairly</font>

50
00:03:31,780 --> 00:03:34,600
<font color="#E5E5E5">comfortable with and so</font><font color="#CCCCCC"> it really should</font>

51
00:03:34,600 --> 00:03:37,120
make take much time one to two hours

52
00:03:37,120 --> 00:03:40,420
potentially to do it and we encourage

53
00:03:40,420 --> 00:03:41,950
you<font color="#CCCCCC"> this will be</font><font color="#E5E5E5"> due a week from today</font>

54
00:03:41,950 --> 00:03:44,830
at<font color="#CCCCCC"> midnight we encourage</font><font color="#E5E5E5"> you to get</font>

55
00:03:44,830 --> 00:03:47,200
<font color="#E5E5E5">going</font><font color="#CCCCCC"> on that right away you don't need</font>

56
00:03:47,200 --> 00:03:48,850
an auto<font color="#E5E5E5"> web account you don't need a</font>

57
00:03:48,850 --> 00:03:52,270
gift<font color="#E5E5E5"> of account you don't need much</font><font color="#CCCCCC"> of</font>

58
00:03:52,270 --> 00:03:55,210
anything except access to the files

59
00:03:55,210 --> 00:03:57,760
which<font color="#E5E5E5"> are on the</font><font color="#CCCCCC"> website and to some</font>

60
00:03:57,760 --> 00:03:59,800
type<font color="#CCCCCC"> of</font><font color="#E5E5E5"> machine that you can compile an</font>

61
00:03:59,800 --> 00:04:04,090
execution<font color="#CCCCCC"> code</font><font color="#E5E5E5"> I've tested</font><font color="#CCCCCC"> it on my Mac</font>

62
00:04:04,090 --> 00:04:07,300
and<font color="#CCCCCC"> on Linux I don't think it would work</font>

63
00:04:07,300 --> 00:04:10,180
correctly and<font color="#CCCCCC"> windows because it makes</font>

64
00:04:10,180 --> 00:04:12,430
uses some Linux libraries but if you

65
00:04:12,430 --> 00:04:14,140
know<font color="#E5E5E5"> if you have a Windows machine</font><font color="#CCCCCC"> and</font>

66
00:04:14,140 --> 00:04:16,209
you want to set<font color="#CCCCCC"> it up there's a open</font>

67
00:04:16,209 --> 00:04:19,870
<font color="#E5E5E5">source software called</font><font color="#CCCCCC"> cig win cy g wi</font><font color="#E5E5E5"> n</font>

68
00:04:19,870 --> 00:04:22,180
that<font color="#E5E5E5"> you can create a certain unix-like</font>

69
00:04:22,180 --> 00:04:24,660
environment on it on a Windows<font color="#CCCCCC"> machine</font>

70
00:04:24,660 --> 00:04:27,790
<font color="#CCCCCC">and this is one we have this elaborate</font>

71
00:04:27,790 --> 00:04:32,470
system of wait days and<font color="#CCCCCC"> grace days and</font>

72
00:04:32,470 --> 00:04:34,300
so forth<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of that applies for this</font>

73
00:04:34,300 --> 00:04:36,070
first assignment<font color="#CCCCCC"> either get it done or</font>

74
00:04:36,070 --> 00:04:40,620
you don't it's intended<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be more</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a</font>

75
00:04:40,620 --> 00:04:43,930
assessment for you to understand whether

76
00:04:43,930 --> 00:04:45,580
you've got<font color="#E5E5E5"> the sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> programming</font>

77
00:04:45,580 --> 00:04:47,860
background that we sort<font color="#E5E5E5"> of minimum about</font>

78
00:04:47,860 --> 00:04:49,600
programming background we expect<font color="#E5E5E5"> for</font>

79
00:04:49,600 --> 00:04:52,990
this<font color="#E5E5E5"> course the other is those you who</font>

80
00:04:52,990 --> 00:04:54,730
are officially<font color="#E5E5E5"> in the course yet</font><font color="#CCCCCC"> are</font>

81
00:04:54,730 --> 00:04:57,250
<font color="#E5E5E5">perhaps on some</font><font color="#CCCCCC"> waitlist</font><font color="#E5E5E5"> please don't</font>

82
00:04:57,250 --> 00:04:59,860
<font color="#E5E5E5">contact us the instructors about</font>

83
00:04:59,860 --> 00:05:03,130
waitlist issues because it's not I

84
00:05:03,130 --> 00:05:05,260
didn't even know how waitress work<font color="#E5E5E5"> when</font>

85
00:05:05,260 --> 00:05:07,840
working with course administrators both

86
00:05:07,840 --> 00:05:09,550
in the CS<font color="#E5E5E5"> it needs to</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> to deal with</font>

87
00:05:09,550 --> 00:05:12,070
<font color="#E5E5E5">these and they</font><font color="#CCCCCC"> are much better equipped</font>

88
00:05:12,070 --> 00:05:16,390
to<font color="#E5E5E5"> deal</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> earlier okay that said</font>

89
00:05:16,390 --> 00:05:20,410
<font color="#E5E5E5">let's move on in and this bet this</font>

90
00:05:20,410 --> 00:05:23,290
material we're gonna do in three

91
00:05:23,290 --> 00:05:25,240
lectures<font color="#CCCCCC"> cover all chapter</font><font color="#E5E5E5"> two of the</font>

92
00:05:25,240 --> 00:05:28,030
book which if you open up<font color="#E5E5E5"> your book</font><font color="#CCCCCC"> and</font>

93
00:05:28,030 --> 00:05:29,710
you count pages you're gonna see a lot

94
00:05:29,710 --> 00:05:31,570
<font color="#CCCCCC">of pages there so it's a pretty fast</font>

95
00:05:31,570 --> 00:05:34,130
move and these lectures<font color="#E5E5E5"> will not</font>

96
00:05:34,130 --> 00:05:35,320
[Music]

97
00:05:35,320 --> 00:05:39,820
and duplicate<font color="#E5E5E5"> completely cover every bit</font>

98
00:05:39,820 --> 00:05:41,940
of material<font color="#E5E5E5"> there it's the kind of thing</font>

99
00:05:41,940 --> 00:05:46,560
<font color="#E5E5E5">none of this is super advanced math but</font>

100
00:05:46,560 --> 00:05:49,240
you have to get really<font color="#E5E5E5"> comfortable with</font>

101
00:05:49,240 --> 00:05:51,310
this is very foundational<font color="#CCCCCC"> material you</font>

102
00:05:51,310 --> 00:05:53,500
have<font color="#E5E5E5"> to be very comfortable</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> to move</font>

103
00:05:53,500 --> 00:05:57,780
<font color="#E5E5E5">on to other parts of the course so</font>

104
00:05:57,780 --> 00:06:00,940
you've grown<font color="#CCCCCC"> up in an era where bits are</font>

105
00:06:00,940 --> 00:06:04,540
a sort of a fact of life<font color="#CCCCCC"> it's</font>

106
00:06:04,540 --> 00:06:07,060
interesting<font color="#E5E5E5"> that the term bit was only</font>

107
00:06:07,060 --> 00:06:10,510
<font color="#E5E5E5">actually first developed</font><font color="#CCCCCC"> in in 1948 or</font>

108
00:06:10,510 --> 00:06:15,400
so by a<font color="#CCCCCC"> phone</font><font color="#E5E5E5"> and Claude Shannon</font><font color="#CCCCCC"> we</font>

109
00:06:15,400 --> 00:06:17,590
didn't invent the bit but he invented

110
00:06:17,590 --> 00:06:19,720
information theory which<font color="#E5E5E5"> defined this or</font>

111
00:06:19,720 --> 00:06:21,070
the most primitive piece of information

112
00:06:21,070 --> 00:06:24,220
<font color="#CCCCCC">as a difference and</font><font color="#E5E5E5"> of course you know</font>

113
00:06:24,220 --> 00:06:29,640
<font color="#E5E5E5">that that everything in your computer is</font>

114
00:06:29,640 --> 00:06:33,820
is sort<font color="#E5E5E5"> of organized and expressed in</font>

115
00:06:33,820 --> 00:06:42,070
terms of ones and<font color="#CCCCCC"> zeroes and</font><font color="#E5E5E5"> that I</font>

116
00:06:42,070 --> 00:06:44,170
don't know if you've ever sat back<font color="#E5E5E5"> and</font>

117
00:06:44,170 --> 00:06:46,180
<font color="#E5E5E5">thought well I wonder why they do it</font>

118
00:06:46,180 --> 00:06:49,180
<font color="#E5E5E5">that way and the answer</font><font color="#CCCCCC"> is well there</font>

119
00:06:49,180 --> 00:06:50,890
aren't<font color="#CCCCCC"> reasons but it's not the only way</font>

120
00:06:50,890 --> 00:06:52,960
to do<font color="#E5E5E5"> it for example</font><font color="#CCCCCC"> that first a</font>

121
00:06:52,960 --> 00:06:55,810
computer<font color="#E5E5E5"> sort of large-scale computer</font>

122
00:06:55,810 --> 00:06:59,200
<font color="#CCCCCC">was this machine called</font><font color="#E5E5E5"> ENIAC</font><font color="#CCCCCC"> and these</font>

123
00:06:59,200 --> 00:07:02,980
vacuum tubes to implement it was<font color="#E5E5E5"> very</font>

124
00:07:02,980 --> 00:07:06,640
<font color="#E5E5E5">large heavy expensive machine and they</font>

125
00:07:06,640 --> 00:07:09,670
encoded everything in decimal<font color="#E5E5E5"> using one</font>

126
00:07:09,670 --> 00:07:11,830
vacuum<font color="#CCCCCC"> tube with basically ten vacuum</font>

127
00:07:11,830 --> 00:07:14,980
tubes for every<font color="#CCCCCC"> digit</font><font color="#E5E5E5"> that would be on</font>

128
00:07:14,980 --> 00:07:17,260
if you think<font color="#CCCCCC"> of him as on or off it</font>

129
00:07:17,260 --> 00:07:20,350
would represent which of<font color="#CCCCCC"> values zero</font>

130
00:07:20,350 --> 00:07:22,000
through<font color="#CCCCCC"> nine is one of</font><font color="#E5E5E5"> those vacuum</font>

131
00:07:22,000 --> 00:07:26,410
tubes in the air<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it wasn't always the</font>

132
00:07:26,410 --> 00:07:28,420
<font color="#CCCCCC">case that</font><font color="#E5E5E5"> powers of two were sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

133
00:07:28,420 --> 00:07:30,490
<font color="#CCCCCC">dominant way of thinking about</font><font color="#E5E5E5"> even</font>

134
00:07:30,490 --> 00:07:33,490
computers but<font color="#E5E5E5"> nowadays you did too close</font>

135
00:07:33,490 --> 00:07:36,400
and there's a few good<font color="#E5E5E5"> reasons from a</font>

136
00:07:36,400 --> 00:07:39,790
sort of systems design perspective one

137
00:07:39,790 --> 00:07:42,250
<font color="#E5E5E5">of them is that in terms of electronics</font>

138
00:07:42,250 --> 00:07:44,410
if you actually<font color="#E5E5E5"> hook up an oscilloscope</font>

139
00:07:44,410 --> 00:07:47,080
<font color="#E5E5E5">or some other meter to electric the</font>

140
00:07:47,080 --> 00:07:48,350
signals

141
00:07:48,350 --> 00:07:49,880
going in and out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> your chips or</font>

142
00:07:49,880 --> 00:07:51,860
somewhere you'll see that they're<font color="#CCCCCC"> not</font>

143
00:07:51,860 --> 00:07:55,220
these perfect smooth square<font color="#CCCCCC"> wines they</font>

144
00:07:55,220 --> 00:07:58,900
have bounces<font color="#E5E5E5"> variant and simile the</font>

145
00:07:58,900 --> 00:08:02,000
devices that<font color="#E5E5E5"> we build circuits out of as</font>

146
00:08:02,000 --> 00:08:06,080
you know<font color="#CCCCCC"> are extremely small and not</font>

147
00:08:06,080 --> 00:08:09,970
that<font color="#E5E5E5"> well engineered</font><font color="#CCCCCC"> as far as nice</font>

148
00:08:09,970 --> 00:08:13,850
<font color="#E5E5E5">Queen responses and things and so the</font>

149
00:08:13,850 --> 00:08:15,650
advantage of doing<font color="#E5E5E5"> everything in powers</font>

150
00:08:15,650 --> 00:08:18,830
of two is her bits is that you can deal

151
00:08:18,830 --> 00:08:20,750
with a lot<font color="#CCCCCC"> of noise or uncertainty</font><font color="#E5E5E5"> or</font>

152
00:08:20,750 --> 00:08:23,120
imperfection in the<font color="#E5E5E5"> system and still</font>

153
00:08:23,120 --> 00:08:25,640
reliably extract from it<font color="#CCCCCC"> a signal of</font>

154
00:08:25,640 --> 00:08:26,840
either<font color="#CCCCCC"> 0 or 1</font>

155
00:08:26,840 --> 00:08:29,050
<font color="#E5E5E5">and especially for storing information</font>

156
00:08:29,050 --> 00:08:31,640
<font color="#CCCCCC">we</font><font color="#E5E5E5"> won't go into</font><font color="#CCCCCC"> too much in this course</font>

157
00:08:31,640 --> 00:08:32,979
<font color="#E5E5E5">but you can</font><font color="#CCCCCC"> imagine there's some</font>

158
00:08:32,979 --> 00:08:35,510
circuits that have feedback loops<font color="#E5E5E5"> where</font>

159
00:08:35,510 --> 00:08:38,120
you can either be feeding back<font color="#CCCCCC"> a one or</font>

160
00:08:38,120 --> 00:08:39,890
feeding<font color="#E5E5E5"> back a zero and that's a very</font>

161
00:08:39,890 --> 00:08:43,190
<font color="#E5E5E5">stable value whereas if you try to</font>

162
00:08:43,190 --> 00:08:46,370
<font color="#E5E5E5">discreetly represent more values than</font>

163
00:08:46,370 --> 00:08:49,730
that then you know decay or noise or

164
00:08:49,730 --> 00:08:51,770
<font color="#E5E5E5">various other sources can drop</font><font color="#CCCCCC"> the</font>

165
00:08:51,770 --> 00:08:55,310
<font color="#CCCCCC">signal so it's become</font><font color="#E5E5E5"> sort of a matter</font>

166
00:08:55,310 --> 00:08:57,200
of<font color="#E5E5E5"> course</font><font color="#CCCCCC"> that everything we do is in</font>

167
00:08:57,200 --> 00:09:03,110
<font color="#E5E5E5">terms of one</font><font color="#CCCCCC"> Suzy Rose and um and it's</font>

168
00:09:03,110 --> 00:09:04,580
important to understand that there's

169
00:09:04,580 --> 00:09:08,000
nothing in a bit or a bit<font color="#CCCCCC"> representation</font>

170
00:09:08,000 --> 00:09:09,680
that tells you for<font color="#E5E5E5"> example this is a</font>

171
00:09:09,680 --> 00:09:14,200
number or<font color="#CCCCCC"> this is a string or this</font><font color="#E5E5E5"> is a</font>

172
00:09:14,200 --> 00:09:17,930
<font color="#E5E5E5">floating-point number</font><font color="#CCCCCC"> or this is a piece</font>

173
00:09:17,930 --> 00:09:20,960
<font color="#CCCCCC">of code</font><font color="#E5E5E5"> the bits are just a bit</font><font color="#CCCCCC"> obvious</font>

174
00:09:20,960 --> 00:09:24,620
<font color="#E5E5E5">value 0 or 1 it's what we how we assign</font>

175
00:09:24,620 --> 00:09:26,990
meaning to<font color="#CCCCCC"> those bits</font><font color="#E5E5E5"> that determines</font>

176
00:09:26,990 --> 00:09:29,300
how we interpret them<font color="#E5E5E5"> and that's sort of</font>

177
00:09:29,300 --> 00:09:33,080
a general abstract<font color="#CCCCCC"> statement that will</font>

178
00:09:33,080 --> 00:09:34,970
keep coming<font color="#E5E5E5"> back to it multiple points</font>

179
00:09:34,970 --> 00:09:37,310
in this course<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure and really</font>

180
00:09:37,310 --> 00:09:42,290
reinforce that idea<font color="#E5E5E5"> so so for example we</font>

181
00:09:42,290 --> 00:09:44,240
<font color="#E5E5E5">could represent a</font><font color="#CCCCCC"> number like</font><font color="#E5E5E5"> fifteen</font>

182
00:09:44,240 --> 00:09:45,830
<font color="#E5E5E5">thousand two hundred thirteen as a</font>

183
00:09:45,830 --> 00:09:49,340
string of ones and<font color="#E5E5E5"> zeros and use a base</font>

184
00:09:49,340 --> 00:09:55,870
<font color="#CCCCCC">two</font><font color="#E5E5E5"> representation and we can think of</font>

185
00:09:55,870 --> 00:10:00,710
<font color="#E5E5E5">numbers that are decimal numbers but we</font>

186
00:10:00,710 --> 00:10:01,790
can represent it

187
00:10:01,790 --> 00:10:04,760
<font color="#CCCCCC">down in</font><font color="#E5E5E5"> base</font><font color="#CCCCCC"> two and in this case we'll</font>

188
00:10:04,760 --> 00:10:06,530
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this a week from today we</font>

189
00:10:06,530 --> 00:10:08,540
<font color="#CCCCCC">know I'm going</font><font color="#E5E5E5"> to call it the decimal</font>

190
00:10:08,540 --> 00:10:10,250
point though we call it the binary<font color="#CCCCCC"> point</font>

191
00:10:10,250 --> 00:10:13,070
where the mark a<font color="#CCCCCC"> ssin is between</font><font color="#E5E5E5"> a</font>

192
00:10:13,070 --> 00:10:16,850
values that have a<font color="#CCCCCC"> weight of some</font>

193
00:10:16,850 --> 00:10:19,790
<font color="#E5E5E5">positive power up to like one two four</font>

194
00:10:19,790 --> 00:10:22,460
eight<font color="#CCCCCC"> and</font><font color="#E5E5E5"> once it have a</font><font color="#CCCCCC"> negative power</font>

195
00:10:22,460 --> 00:10:27,020
<font color="#E5E5E5">of 2</font><font color="#CCCCCC"> which weighed like 1/2 1/4 1/8 and</font>

196
00:10:27,020 --> 00:10:30,110
so forth and so<font color="#E5E5E5"> actually when</font><font color="#CCCCCC"> we</font>

197
00:10:30,110 --> 00:10:33,100
represent<font color="#CCCCCC"> floating point numbers</font><font color="#E5E5E5"> we're</font>

198
00:10:33,100 --> 00:10:37,190
using a base<font color="#CCCCCC"> 2 representation so the</font>

199
00:10:37,190 --> 00:10:39,380
<font color="#E5E5E5">floating point number</font><font color="#CCCCCC"> one five two and</font>

200
00:10:39,380 --> 00:10:43,660
<font color="#CCCCCC">three</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> is represented as a</font>

201
00:10:43,660 --> 00:10:47,080
binary number<font color="#CCCCCC"> but with a binary</font><font color="#E5E5E5"> point</font>

202
00:10:47,080 --> 00:10:51,200
and then weighted by the two to the 13th

203
00:10:51,200 --> 00:10:58,700
<font color="#E5E5E5">which is what what it takes has nothing</font>

204
00:10:58,700 --> 00:11:00,680
to do with<font color="#CCCCCC"> 15 two and three it has to do</font>

205
00:11:00,680 --> 00:11:02,630
with<font color="#E5E5E5"> what it takes to get a number that</font>

206
00:11:02,630 --> 00:11:05,660
somewhere between<font color="#CCCCCC"> 1 and 2</font><font color="#E5E5E5"> scaled up</font><font color="#CCCCCC"> to</font>

207
00:11:05,660 --> 00:11:11,240
be<font color="#CCCCCC"> 15,000 so again these are</font><font color="#E5E5E5"> fairly</font>

208
00:11:11,240 --> 00:11:13,700
straightforward ideas but you just have

209
00:11:13,700 --> 00:11:15,530
<font color="#E5E5E5">to keep coming</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to this all the</font><font color="#CCCCCC"> time</font>

210
00:11:15,530 --> 00:11:18,140
if I see<font color="#CCCCCC"> a bit string I can't know in</font>

211
00:11:18,140 --> 00:11:20,690
advance what<font color="#E5E5E5"> whether it's one number or</font>

212
00:11:20,690 --> 00:11:23,290
another or what<font color="#CCCCCC"> its representation is</font>

213
00:11:23,290 --> 00:11:28,210
and I can interpret<font color="#E5E5E5"> in different ways so</font>

214
00:11:28,210 --> 00:11:30,530
there's various<font color="#E5E5E5"> ways that you can</font>

215
00:11:30,530 --> 00:11:33,830
represent<font color="#CCCCCC"> small</font><font color="#E5E5E5"> or bit strings you can</font>

216
00:11:33,830 --> 00:11:36,320
<font color="#E5E5E5">write it all off</font><font color="#CCCCCC"> minor</font><font color="#E5E5E5"> it but that gets</font>

217
00:11:36,320 --> 00:11:39,590
to<font color="#CCCCCC"> be kind</font><font color="#E5E5E5"> of cumbersome when you have</font>

218
00:11:39,590 --> 00:11:43,370
say a 64-bit value to write out the

219
00:11:43,370 --> 00:11:45,890
string of ones and<font color="#CCCCCC"> zeroes and</font><font color="#E5E5E5"> so what</font>

220
00:11:45,890 --> 00:11:47,750
<font color="#CCCCCC">we'll typically do in this course and</font>

221
00:11:47,750 --> 00:11:51,340
it's fairly<font color="#CCCCCC"> commonplace</font><font color="#E5E5E5"> is to pack them</font>

222
00:11:51,340 --> 00:11:53,870
<font color="#E5E5E5">sort of group them</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> four bits at a</font>

223
00:11:53,870 --> 00:11:57,410
<font color="#CCCCCC">time</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> some value between 0 and 15</font>

224
00:11:57,410 --> 00:12:00,050
if you think of it<font color="#CCCCCC"> numerically and we'll</font>

225
00:12:00,050 --> 00:12:01,850
represent that as a<font color="#E5E5E5"> single digit in</font>

226
00:12:01,850 --> 00:12:04,520
hexadecimal notation<font color="#E5E5E5"> hexadecimal meaning</font>

227
00:12:04,520 --> 00:12:09,980
power 16 representations<font color="#E5E5E5"> and rather than</font>

228
00:12:09,980 --> 00:12:12,380
suffixing numbers with what base were

229
00:12:12,380 --> 00:12:12,840
used

230
00:12:12,840 --> 00:12:15,510
we'll do it<font color="#E5E5E5"> the way it's written and see</font>

231
00:12:15,510 --> 00:12:19,320
which is to say<font color="#E5E5E5"> that we'll</font><font color="#CCCCCC"> just prefix</font>

232
00:12:19,320 --> 00:12:22,680
<font color="#E5E5E5">something with</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> be an upper</font>

233
00:12:22,680 --> 00:12:27,950
<font color="#CCCCCC">lower case X the letters in there can be</font>

234
00:12:27,950 --> 00:12:30,960
lower upper case it<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> matter</font><font color="#CCCCCC"> but</font>

235
00:12:30,960 --> 00:12:32,580
<font color="#CCCCCC">basically we</font><font color="#E5E5E5"> will use the digits</font><font color="#CCCCCC"> 0</font>

236
00:12:32,580 --> 00:12:35,610
through 9<font color="#E5E5E5"> of course a through</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> which</font>

237
00:12:35,610 --> 00:12:39,570
<font color="#E5E5E5">encode these 16 possibilities and so one</font>

238
00:12:39,570 --> 00:12:42,270
of<font color="#E5E5E5"> the things skills you will acquire in</font>

239
00:12:42,270 --> 00:12:44,730
this class whether you want it or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> is</font>

240
00:12:44,730 --> 00:12:47,790
<font color="#CCCCCC">the ability to fairly easily go between</font>

241
00:12:47,790 --> 00:12:51,510
a bit pattern and one of these 16

242
00:12:51,510 --> 00:12:56,040
characters<font color="#E5E5E5"> which sounds like a strange</font>

243
00:12:56,040 --> 00:12:57,779
skill to acquire<font color="#E5E5E5"> but it's actually quite</font>

244
00:12:57,779 --> 00:13:06,690
<font color="#CCCCCC">useful so for</font><font color="#E5E5E5"> example the way</font><font color="#CCCCCC"> we</font>

245
00:13:06,690 --> 00:13:11,339
represent<font color="#E5E5E5"> the instead of writing out 15</font>

246
00:13:11,339 --> 00:13:14,940
to 13 in<font color="#CCCCCC"> binary we would group that by</font>

247
00:13:14,940 --> 00:13:21,300
saying<font color="#E5E5E5"> well 0 1 1 is 3 on this table</font><font color="#CCCCCC"> and</font>

248
00:13:21,300 --> 00:13:29,630
1<font color="#CCCCCC"> 0 1 1</font><font color="#E5E5E5"> is d 0 1 1 is 0 6</font><font color="#CCCCCC"> & 1 1 0 1</font><font color="#E5E5E5"> is</font>

249
00:13:29,630 --> 00:13:33,710
I'm sorry<font color="#CCCCCC"> D and then dude</font>

250
00:13:35,720 --> 00:13:38,550
by the<font color="#E5E5E5"> way my trick on this is I</font>

251
00:13:38,550 --> 00:13:41,310
memorized<font color="#E5E5E5"> 0 0 through 9 is pretty</font>

252
00:13:41,310 --> 00:13:44,130
straightforward<font color="#CCCCCC"> I know this is a I know</font>

253
00:13:44,130 --> 00:13:47,670
this is C and I know this is<font color="#CCCCCC"> 1/2 and I</font>

254
00:13:47,670 --> 00:13:49,230
kind of interpret the other ones between

255
00:13:49,230 --> 00:13:52,800
<font color="#CCCCCC">at</font><font color="#E5E5E5"> this when I don't have</font><font color="#CCCCCC"> the table if</font>

256
00:13:52,800 --> 00:13:54,330
you<font color="#E5E5E5"> have to if you're stepping on a</font>

257
00:13:54,330 --> 00:13:56,520
desert island<font color="#E5E5E5"> having to encode thank you</font>

258
00:13:56,520 --> 00:13:59,780
tax this

259
00:13:59,959 --> 00:14:03,569
interesting quandary<font color="#E5E5E5"> HP it writes Oh</font>

260
00:14:03,569 --> 00:14:06,689
and so one of the things will keep

261
00:14:06,689 --> 00:14:09,119
<font color="#E5E5E5">coming back to this when we looking at</font>

262
00:14:09,119 --> 00:14:12,480
typical<font color="#E5E5E5"> values on the machine there is</font>

263
00:14:12,480 --> 00:14:15,619
<font color="#E5E5E5">no standard</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no uniform standard</font>

264
00:14:15,619 --> 00:14:18,689
and so<font color="#E5E5E5"> people will talk about</font><font color="#CCCCCC"> well</font>

265
00:14:18,689 --> 00:14:20,699
what's<font color="#E5E5E5"> the word size of your machine and</font>

266
00:14:20,699 --> 00:14:23,249
is it a 32-bit machine<font color="#E5E5E5"> or a 64-bit</font>

267
00:14:23,249 --> 00:14:25,319
<font color="#CCCCCC">machine you'll hear all those terms</font>

268
00:14:25,319 --> 00:14:28,499
thrown around and the truth is none of

269
00:14:28,499 --> 00:14:31,319
<font color="#E5E5E5">those are very</font><font color="#CCCCCC"> meaningful in</font><font color="#E5E5E5"> particular</font>

270
00:14:31,319 --> 00:14:35,819
like this<font color="#E5E5E5"> Windows machine or my standard</font>

271
00:14:35,819 --> 00:14:38,489
basically Intel microprocessor is

272
00:14:38,489 --> 00:14:40,290
actually the hardware and there is built

273
00:14:40,290 --> 00:14:45,989
to support 64-bit<font color="#E5E5E5"> operations</font><font color="#CCCCCC"> integer</font>

274
00:14:45,989 --> 00:14:50,369
operations addresses and so forth<font color="#CCCCCC"> but it</font>

275
00:14:50,369 --> 00:14:56,459
can also<font color="#E5E5E5"> run in a a compatibility mode</font>

276
00:14:56,459 --> 00:15:01,790
that goes back<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> the long the</font>

277
00:15:01,790 --> 00:15:06,869
early 90s<font color="#CCCCCC"> where the machine</font><font color="#E5E5E5"> only</font>

278
00:15:06,869 --> 00:15:09,600
supported 32-bit operations<font color="#E5E5E5"> and so we'll</font>

279
00:15:09,600 --> 00:15:12,389
talk<font color="#CCCCCC"> about a 64-bit machine and a 32-bit</font>

280
00:15:12,389 --> 00:15:15,149
machine<font color="#E5E5E5"> but the truth is that this one</font>

281
00:15:15,149 --> 00:15:18,240
machine<font color="#E5E5E5"> is both and that's true probably</font>

282
00:15:18,240 --> 00:15:20,910
<font color="#E5E5E5">for most of the machines of any sort</font>

283
00:15:20,910 --> 00:15:23,429
that<font color="#E5E5E5"> you'll encounter these days and so</font>

284
00:15:23,429 --> 00:15:26,160
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really a combination of operating</font>

285
00:15:26,160 --> 00:15:28,470
system the compiler what code it

286
00:15:28,470 --> 00:15:31,319
generates<font color="#E5E5E5"> and hardware itself that</font>

287
00:15:31,319 --> 00:15:34,019
determines what the<font color="#E5E5E5"> Machine type is and</font>

288
00:15:34,019 --> 00:15:35,759
that's so<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> configure</font>

289
00:15:35,759 --> 00:15:37,769
when you compile code you will go into

290
00:15:37,769 --> 00:15:41,249
this<font color="#CCCCCC"> whether to generate 64-bit code or</font>

291
00:15:41,249 --> 00:15:43,589
32-bit<font color="#E5E5E5"> code and most the machines you'll</font>

292
00:15:43,589 --> 00:15:48,509
feel so and you'll see<font color="#E5E5E5"> that the basic C</font>

293
00:15:48,509 --> 00:15:51,839
<font color="#E5E5E5">data types</font><font color="#CCCCCC"> for most parts are</font>

294
00:15:51,839 --> 00:15:54,299
independent<font color="#E5E5E5"> of whether it's 64 or 32</font>

295
00:15:54,299 --> 00:15:59,220
bits except<font color="#E5E5E5"> for when you</font><font color="#CCCCCC"> quit let</font><font color="#E5E5E5"> say</font>

296
00:15:59,220 --> 00:16:01,379
something is a long<font color="#E5E5E5"> go see all of a</font>

297
00:16:01,379 --> 00:16:03,389
sudden it flips from<font color="#CCCCCC"> four</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> eight</font>

298
00:16:03,389 --> 00:16:07,949
<font color="#E5E5E5">between and in which execution</font><font color="#CCCCCC"> model</font>

299
00:16:07,949 --> 00:16:09,899
details<font color="#E5E5E5"> and similarly the</font><font color="#CCCCCC"> fighter is</font><font color="#E5E5E5"> and</font>

300
00:16:09,899 --> 00:16:10,300
this<font color="#E5E5E5"> is</font>

301
00:16:10,300 --> 00:16:15,040
<font color="#CCCCCC">Joey counts</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> four bytes</font><font color="#E5E5E5"> is a standard</font>

302
00:16:15,040 --> 00:16:17,410
address<font color="#E5E5E5"> on a 32-bit</font><font color="#CCCCCC"> machine it's enough</font>

303
00:16:17,410 --> 00:16:19,720
to give you a<font color="#E5E5E5"> range of about four</font>

304
00:16:19,720 --> 00:16:24,040
gigabytes of memory<font color="#E5E5E5"> which when that came</font>

305
00:16:24,040 --> 00:16:26,620
along that<font color="#E5E5E5"> was a lot</font><font color="#CCCCCC"> of memories</font><font color="#E5E5E5"> but</font>

306
00:16:26,620 --> 00:16:29,230
<font color="#E5E5E5">nowadays of course</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of machines</font>

307
00:16:29,230 --> 00:16:31,900
have more than 40 gigabytes of RAM<font color="#E5E5E5"> in</font>

308
00:16:31,900 --> 00:16:34,270
them and so<font color="#E5E5E5"> that's part of the reason</font>

309
00:16:34,270 --> 00:16:36,990
why things have really<font color="#E5E5E5"> shifted over to</font>

310
00:16:36,990 --> 00:16:38,290
<font color="#E5E5E5">64-bit</font>

311
00:16:38,290 --> 00:16:42,670
<font color="#E5E5E5">where now the range is far greater again</font>

312
00:16:42,670 --> 00:16:46,630
<font color="#E5E5E5">we'll keep coming back to this so</font><font color="#CCCCCC"> down</font>

313
00:16:46,630 --> 00:16:48,970
at<font color="#E5E5E5"> the lowest</font><font color="#CCCCCC"> bubble then as I</font><font color="#E5E5E5"> said</font>

314
00:16:48,970 --> 00:16:53,530
we're operating on<font color="#CCCCCC"> bits and the same guy</font>

315
00:16:53,530 --> 00:16:55,240
who invented<font color="#CCCCCC"> informations</font><font color="#E5E5E5"> here at Claude</font>

316
00:16:55,240 --> 00:17:01,470
Shannon did a master's thesis<font color="#E5E5E5"> in 1939</font>

317
00:17:01,470 --> 00:17:04,569
<font color="#CCCCCC">that or 38 or so that was like</font>

318
00:17:04,569 --> 00:17:06,880
<font color="#E5E5E5">considered the greatest</font><font color="#CCCCCC"> master's thesis</font>

319
00:17:06,880 --> 00:17:13,150
ever because he<font color="#E5E5E5"> linked up the idea of a</font>

320
00:17:13,150 --> 00:17:15,760
boolean algebra which was had been

321
00:17:15,760 --> 00:17:17,829
developed by this<font color="#E5E5E5"> magician from in</font>

322
00:17:17,829 --> 00:17:20,470
England<font color="#CCCCCC"> in the late 19th century named</font>

323
00:17:20,470 --> 00:17:23,079
<font color="#E5E5E5">George Boole with how do you design</font>

324
00:17:23,079 --> 00:17:26,920
<font color="#E5E5E5">digital circuits and so the idea of bool</font>

325
00:17:26,920 --> 00:17:29,740
was trying to codify<font color="#CCCCCC"> what we call</font>

326
00:17:29,740 --> 00:17:32,110
propositional logic reasoning about<font color="#CCCCCC"> to</font>

327
00:17:32,110 --> 00:17:36,250
in vaults things<font color="#CCCCCC"> Oh as an algebraic form</font>

328
00:17:36,250 --> 00:17:39,820
sort<font color="#E5E5E5"> of making</font><font color="#CCCCCC"> it more like math than</font>

329
00:17:39,820 --> 00:17:42,040
like something that<font color="#CCCCCC"> sort of an abstract</font>

330
00:17:42,040 --> 00:17:45,490
philosophical concept and so his idea is

331
00:17:45,490 --> 00:17:48,160
think of<font color="#E5E5E5"> zero is like false and one like</font>

332
00:17:48,160 --> 00:17:50,950
true<font color="#E5E5E5"> and now we can algebraically</font>

333
00:17:50,950 --> 00:17:54,100
introduce an operator like<font color="#E5E5E5"> and that</font>

334
00:17:54,100 --> 00:17:57,160
gives you a true value<font color="#CCCCCC"> only if both</font>

335
00:17:57,160 --> 00:18:01,360
inputs are true<font color="#E5E5E5"> so a and B means both a</font>

336
00:18:01,360 --> 00:18:03,700
and B have<font color="#CCCCCC"> to be true and similarly or</font>

337
00:18:03,700 --> 00:18:08,410
well either A or B has to be true<font color="#CCCCCC"> on so</font>

338
00:18:08,410 --> 00:18:10,540
if both<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our faults are</font><font color="#CCCCCC"> 0 and then</font><font color="#E5E5E5"> you</font>

339
00:18:10,540 --> 00:18:13,960
get a<font color="#E5E5E5"> 0 and same with a negation you</font>

340
00:18:13,960 --> 00:18:17,230
just flip true and false<font color="#E5E5E5"> and there's one</font>

341
00:18:17,230 --> 00:18:19,450
called<font color="#E5E5E5"> exclusive or that we distinguish</font>

342
00:18:19,450 --> 00:18:20,340
between<font color="#E5E5E5"> in</font>

343
00:18:20,340 --> 00:18:23,880
if an exclusive we say exclusive<font color="#CCCCCC"> lore</font>

344
00:18:23,880 --> 00:18:25,590
means one or<font color="#CCCCCC"> the other is true but not</font>

345
00:18:25,590 --> 00:18:28,410
<font color="#E5E5E5">both it's interesting in English we kind</font>

346
00:18:28,410 --> 00:18:31,470
of in fun way you can blur that

347
00:18:31,470 --> 00:18:33,180
distinction<font color="#E5E5E5"> between inclusive and</font>

348
00:18:33,180 --> 00:18:36,300
exclusive<font color="#CCCCCC"> I can say would you</font><font color="#E5E5E5"> like me to</font>

349
00:18:36,300 --> 00:18:38,250
cut off<font color="#CCCCCC"> your</font><font color="#E5E5E5"> left hand or your right</font>

350
00:18:38,250 --> 00:18:41,820
hand<font color="#CCCCCC"> right and there's sort</font><font color="#E5E5E5"> of an</font>

351
00:18:41,820 --> 00:18:43,500
<font color="#E5E5E5">implicit</font><font color="#CCCCCC"> understanding that I'm not</font>

352
00:18:43,500 --> 00:18:50,640
gonna cut off<font color="#CCCCCC"> both</font><font color="#E5E5E5"> so if you think</font><font color="#CCCCCC"> about</font>

353
00:18:50,640 --> 00:18:53,700
how we<font color="#E5E5E5"> use or in ordinary discourse</font>

354
00:18:53,700 --> 00:18:56,130
<font color="#E5E5E5">sometimes they mean inclusive and</font>

355
00:18:56,130 --> 00:18:58,920
sometimes to be next<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we'll</font>

356
00:18:58,920 --> 00:19:00,630
distinguish those<font color="#E5E5E5"> obviously a student</font>

357
00:19:00,630 --> 00:19:05,130
<font color="#CCCCCC">operation so back when</font><font color="#E5E5E5"> Shannon did this</font>

358
00:19:05,130 --> 00:19:08,580
<font color="#E5E5E5">actually it was back when instead</font><font color="#CCCCCC"> of</font>

359
00:19:08,580 --> 00:19:11,760
transistors they had relays

360
00:19:11,760 --> 00:19:13,890
<font color="#E5E5E5">electromechanical realized and they</font>

361
00:19:13,890 --> 00:19:17,100
built these<font color="#E5E5E5"> remarkably complex systems</font>

362
00:19:17,100 --> 00:19:19,020
<font color="#E5E5E5">like whole telephone switching</font><font color="#CCCCCC"> networks</font>

363
00:19:19,020 --> 00:19:21,480
out<font color="#E5E5E5"> of these electromechanical relays</font>

364
00:19:21,480 --> 00:19:24,090
and he was the first<font color="#E5E5E5"> to kind of come up</font>

365
00:19:24,090 --> 00:19:26,700
<font color="#CCCCCC">with basic principles that</font><font color="#E5E5E5"> you can take</font>

366
00:19:26,700 --> 00:19:29,210
this<font color="#CCCCCC"> Network realize and systematically</font>

367
00:19:29,210 --> 00:19:32,850
<font color="#E5E5E5">derive an expression describing when</font>

368
00:19:32,850 --> 00:19:34,470
you're<font color="#CCCCCC"> going to get a connection</font><font color="#E5E5E5"> from</font>

369
00:19:34,470 --> 00:19:36,210
point A to point B through<font color="#E5E5E5"> this series</font>

370
00:19:36,210 --> 00:19:37,190
<font color="#E5E5E5">of real ones</font>

371
00:19:37,190 --> 00:19:40,530
makes you<font color="#E5E5E5"> wonder</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> did they do this</font>

372
00:19:40,530 --> 00:19:43,230
<font color="#E5E5E5">before</font><font color="#CCCCCC"> he thought</font><font color="#E5E5E5"> of this</font><font color="#CCCCCC"> so it's one of</font>

373
00:19:43,230 --> 00:19:45,420
<font color="#CCCCCC">those</font><font color="#E5E5E5"> interesting things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> after the</font>

374
00:19:45,420 --> 00:19:47,610
the linkage had been made it was so

375
00:19:47,610 --> 00:19:49,680
<font color="#CCCCCC">self-evident</font><font color="#E5E5E5"> that we can't</font><font color="#CCCCCC"> imagine any</font>

376
00:19:49,680 --> 00:19:50,760
other way<font color="#CCCCCC"> of doing things</font>

377
00:19:50,760 --> 00:19:57,120
<font color="#E5E5E5">oh so we can generalize them from just</font>

378
00:19:57,120 --> 00:19:59,400
as simple<font color="#CCCCCC"> zero or one true/false value</font>

379
00:19:59,400 --> 00:20:01,950
to basically a whole string of bits or

380
00:20:01,950 --> 00:20:04,080
<font color="#E5E5E5">what we call a bit vector and if you</font>

381
00:20:04,080 --> 00:20:06,750
think<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it learned on a computer we</font>

382
00:20:06,750 --> 00:20:10,650
<font color="#CCCCCC">have 32</font><font color="#E5E5E5"> or 64 bits we can think of those</font>

383
00:20:10,650 --> 00:20:13,320
<font color="#CCCCCC">as not</font><font color="#E5E5E5"> just representing a</font><font color="#CCCCCC"> number but</font>

384
00:20:13,320 --> 00:20:15,330
<font color="#CCCCCC">just as string</font><font color="#E5E5E5"> of zeros and</font><font color="#CCCCCC"> ones</font><font color="#E5E5E5"> and</font>

385
00:20:15,330 --> 00:20:18,980
when we can apply these same operations

386
00:20:18,980 --> 00:20:23,850
<font color="#E5E5E5">to strings of bits so we say and they</font>

387
00:20:23,850 --> 00:20:27,690
apply now on a bit for dense basis<font color="#E5E5E5"> so if</font>

388
00:20:27,690 --> 00:20:28,890
we have an<font color="#E5E5E5"> ant</font>

389
00:20:28,890 --> 00:20:32,400
we have to have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> in both both</font>

390
00:20:32,400 --> 00:20:35,880
elements<font color="#E5E5E5"> in the column in order to get a</font>

391
00:20:35,880 --> 00:20:39,179
one as a<font color="#E5E5E5"> result and similarly for other</font>

392
00:20:39,179 --> 00:20:55,140
operations and<font color="#E5E5E5"> so you can see again</font><font color="#CCCCCC"> more</font>

393
00:20:55,140 --> 00:20:59,960
you have to<font color="#CCCCCC"> have one or the other</font><font color="#E5E5E5"> and</font>

394
00:20:59,960 --> 00:21:03,570
the<font color="#E5E5E5"> same kind of reasoning principle</font>

395
00:21:03,570 --> 00:21:06,570
<font color="#E5E5E5">says</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the sort of simple</font><font color="#CCCCCC"> zero in one</font>

396
00:21:06,570 --> 00:21:09,660
case applies to mostly<font color="#E5E5E5"> holds for the</font>

397
00:21:09,660 --> 00:21:14,549
string of<font color="#CCCCCC"> six case two now</font><font color="#E5E5E5"> that one of</font>

398
00:21:14,549 --> 00:21:17,460
<font color="#E5E5E5">the actual very practical uses of this</font>

399
00:21:17,460 --> 00:21:24,630
is for thinking about<font color="#E5E5E5"> set so imagine</font>

400
00:21:24,630 --> 00:21:29,330
that you<font color="#E5E5E5"> have a maximum of 32 things and</font>

401
00:21:29,330 --> 00:21:32,160
so<font color="#E5E5E5"> you want to represent different sets</font>

402
00:21:32,160 --> 00:21:34,919
or subsets of those<font color="#E5E5E5"> 32 different things</font>

403
00:21:34,919 --> 00:21:37,110
well<font color="#E5E5E5"> you can just use a bit string of</font>

404
00:21:37,110 --> 00:21:39,600
length 32 and say it's a<font color="#E5E5E5"> one of a given</font>

405
00:21:39,600 --> 00:21:42,450
element is there<font color="#CCCCCC"> a zero if it's</font><font color="#E5E5E5"> gone and</font>

406
00:21:42,450 --> 00:21:45,270
then use now<font color="#E5E5E5"> when you think</font><font color="#CCCCCC"> of an that</font>

407
00:21:45,270 --> 00:21:48,660
<font color="#E5E5E5">becomes like intersection of two sets</font><font color="#CCCCCC"> or</font>

408
00:21:48,660 --> 00:21:52,049
becomes like Union and exclusive<font color="#CCCCCC"> are</font>

409
00:21:52,049 --> 00:21:53,460
becomes what they call a symmetric

410
00:21:53,460 --> 00:21:55,770
difference between the sets<font color="#CCCCCC"> so this is</font>

411
00:21:55,770 --> 00:21:58,530
actually used a lot in real life in

412
00:21:58,530 --> 00:22:00,210
computers<font color="#CCCCCC"> and you'll come across</font><font color="#E5E5E5"> this</font>

413
00:22:00,210 --> 00:22:03,390
that<font color="#E5E5E5"> will want to keep track of how</font><font color="#CCCCCC"> many</font>

414
00:22:03,390 --> 00:22:06,630
different network<font color="#CCCCCC"> connections are we</font>

415
00:22:06,630 --> 00:22:09,510
maintaining at any given time<font color="#CCCCCC"> and be</font>

416
00:22:09,510 --> 00:22:13,530
able<font color="#E5E5E5"> to selectively say I will accept an</font>

417
00:22:13,530 --> 00:22:16,620
incoming message<font color="#CCCCCC"> from</font><font color="#E5E5E5"> any of this subset</font>

418
00:22:16,620 --> 00:22:18,960
of the<font color="#E5E5E5"> possible connections so there is</font>

419
00:22:18,960 --> 00:22:22,669
a actually a library<font color="#CCCCCC"> that lets you</font>

420
00:22:22,669 --> 00:22:26,179
create these sets and manipulate them

421
00:22:26,179 --> 00:22:28,620
<font color="#E5E5E5">but underlying it all all they're doing</font>

422
00:22:28,620 --> 00:22:32,429
is<font color="#CCCCCC"> using these words of bits one or</font>

423
00:22:32,429 --> 00:22:35,730
multiple<font color="#CCCCCC"> words to</font><font color="#E5E5E5"> indicate them and so</font>

424
00:22:35,730 --> 00:22:37,530
<font color="#E5E5E5">it's sometimes this is</font><font color="#CCCCCC"> sometimes called</font>

425
00:22:37,530 --> 00:22:40,230
a mask<font color="#E5E5E5"> when you have a string of</font><font color="#CCCCCC"> ones</font>

426
00:22:40,230 --> 00:22:42,110
and<font color="#CCCCCC"> zeros the ones are the</font>

427
00:22:42,110 --> 00:22:44,420
that you're kind of interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> right</font>

428
00:22:44,420 --> 00:22:46,040
<font color="#CCCCCC">now and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> zeroes are</font><font color="#E5E5E5"> the ones that</font>

429
00:22:46,040 --> 00:22:48,380
<font color="#CCCCCC">you're you're not interested</font><font color="#E5E5E5"> in and you</font>

430
00:22:48,380 --> 00:22:51,020
use an and operation than to just<font color="#E5E5E5"> only</font>

431
00:22:51,020 --> 00:22:54,110
look at the items of interest so this is

432
00:22:54,110 --> 00:22:55,730
sort<font color="#E5E5E5"> of a very practical thing but it's</font>

433
00:22:55,730 --> 00:23:01,010
<font color="#E5E5E5">also very important from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> mathematical</font>

434
00:23:01,010 --> 00:23:01,549
sense

435
00:23:01,549 --> 00:23:04,390
and there's actually a theorem called

436
00:23:04,390 --> 00:23:07,610
<font color="#CCCCCC">the stone representation theorem</font><font color="#E5E5E5"> due to</font>

437
00:23:07,610 --> 00:23:10,780
a mr. stone<font color="#CCCCCC"> but said there's a sort of</font>

438
00:23:10,780 --> 00:23:13,940
one-to-one<font color="#E5E5E5"> mapping between an arbitrary</font>

439
00:23:13,940 --> 00:23:20,270
set<font color="#E5E5E5"> as</font><font color="#CCCCCC"> accountable</font><font color="#E5E5E5"> and they basically a</font>

440
00:23:20,270 --> 00:23:26,630
<font color="#E5E5E5">big vector representation of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> so</font>

441
00:23:26,630 --> 00:23:29,630
in C and in actually most contemporary

442
00:23:29,630 --> 00:23:31,700
programming languages<font color="#CCCCCC"> you can actually</font>

443
00:23:31,700 --> 00:23:34,190
<font color="#E5E5E5">make use of those operations and well</font>

444
00:23:34,190 --> 00:23:37,809
you're gonna get some serious<font color="#E5E5E5"> heavy-duty</font>

445
00:23:37,809 --> 00:23:40,190
<font color="#E5E5E5">experience with this in lab</font><font color="#CCCCCC"> one which</font>

446
00:23:40,190 --> 00:23:43,520
will<font color="#E5E5E5"> be out</font><font color="#CCCCCC"> next Tuesday by</font><font color="#E5E5E5"> the way of</font>

447
00:23:43,520 --> 00:23:49,340
learning<font color="#E5E5E5"> how to love or hate or at least</font>

448
00:23:49,340 --> 00:23:51,799
make use of these bitwise boolean

449
00:23:51,799 --> 00:23:54,290
operations and so the symbols<font color="#CCCCCC"> that were</font>

450
00:23:54,290 --> 00:23:57,620
used earlier for<font color="#E5E5E5"> and or an exclusive or</font>

451
00:23:57,620 --> 00:23:59,929
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ones that C</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> for these</font>

452
00:23:59,929 --> 00:24:03,470
<font color="#CCCCCC">bit-level</font><font color="#E5E5E5"> operations until</font><font color="#CCCCCC"> therefore</font>

453
00:24:03,470 --> 00:24:09,169
enough as well<font color="#E5E5E5"> oh so for example we can</font>

454
00:24:09,169 --> 00:24:13,309
<font color="#E5E5E5">um</font><font color="#CCCCCC"> look at some</font><font color="#E5E5E5"> one byte value so one</font>

455
00:24:13,309 --> 00:24:15,350
byte values can record be represented by

456
00:24:15,350 --> 00:24:20,990
two x digits<font color="#CCCCCC"> and we can look</font><font color="#E5E5E5"> at well</font>

457
00:24:20,990 --> 00:24:23,500
what<font color="#CCCCCC"> would these operations be and</font>

458
00:24:23,500 --> 00:24:27,320
unless here like a<font color="#CCCCCC"> row hex wizard</font><font color="#E5E5E5"> you</font>

459
00:24:27,320 --> 00:24:31,160
<font color="#E5E5E5">probably can't just do that straight</font>

460
00:24:31,160 --> 00:24:34,340
away<font color="#E5E5E5"> like</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> the complement of four is</font>

461
00:24:34,340 --> 00:24:42,549
<font color="#E5E5E5">oh but you could use the table and cheat</font>

462
00:24:45,360 --> 00:24:48,070
<font color="#CCCCCC">but what you can</font><font color="#E5E5E5"> really do is right</font><font color="#CCCCCC"> now</font>

463
00:24:48,070 --> 00:24:50,320
<font color="#CCCCCC">you know there is a binary expansion</font><font color="#E5E5E5"> of</font>

464
00:24:50,320 --> 00:24:51,580
four and one

465
00:24:51,580 --> 00:24:55,510
then you invert those bits<font color="#E5E5E5"> and then you</font>

466
00:24:55,510 --> 00:24:57,700
go<font color="#CCCCCC"> one zero one one</font><font color="#E5E5E5"> and you'll find that</font>

467
00:24:57,700 --> 00:25:01,120
at the<font color="#E5E5E5"> table</font><font color="#CCCCCC"> of B and similarly one one</font>

468
00:25:01,120 --> 00:25:06,340
one zero is an e so<font color="#E5E5E5"> pecs is is sort</font><font color="#CCCCCC"> of a</font>

469
00:25:06,340 --> 00:25:09,280
convenient way to write<font color="#E5E5E5"> things out but</font>

470
00:25:09,280 --> 00:25:10,780
not<font color="#E5E5E5"> a very convenient way to reason</font>

471
00:25:10,780 --> 00:25:16,720
<font color="#CCCCCC">about things</font><font color="#E5E5E5"> your question well it's a</font>

472
00:25:16,720 --> 00:25:20,770
care of<font color="#CCCCCC"> data type so remember all</font>

473
00:25:20,770 --> 00:25:23,980
computers nowadays can represent various

474
00:25:23,980 --> 00:25:26,919
different sizes<font color="#E5E5E5"> so the underlying data</font>

475
00:25:26,919 --> 00:25:31,929
<font color="#E5E5E5">type care CH AR sometimes called char is</font>

476
00:25:31,929 --> 00:25:35,080
<font color="#CCCCCC">8 bits so yes you do have an 8-bit</font>

477
00:25:35,080 --> 00:25:38,830
computer I can you have many<font color="#E5E5E5"> of them in</font>

478
00:25:38,830 --> 00:25:41,980
<font color="#E5E5E5">your lives</font><font color="#CCCCCC"> but they also often are 16</font>

479
00:25:41,980 --> 00:25:47,940
32-bit and 64-bit computers<font color="#CCCCCC"> - question</font>

480
00:25:49,980 --> 00:25:54,600
yes same thing if you<font color="#CCCCCC"> think about that</font>

481
00:25:54,600 --> 00:25:58,480
<font color="#E5E5E5">subtraction of if you take all</font><font color="#CCCCCC"> one's</font><font color="#E5E5E5"> 15</font>

482
00:25:58,480 --> 00:26:02,220
and subtract<font color="#E5E5E5"> that you don't have any</font>

483
00:26:02,220 --> 00:26:05,530
<font color="#E5E5E5">carries or virus so it will be exactly</font>

484
00:26:05,530 --> 00:26:07,419
<font color="#E5E5E5">the complement that's a useful way to</font>

485
00:26:07,419 --> 00:26:13,020
think about<font color="#E5E5E5"> bit level operations</font>

486
00:26:15,540 --> 00:26:18,570
and<font color="#E5E5E5"> simile I can say the compliment of</font>

487
00:26:18,570 --> 00:26:21,090
all<font color="#CCCCCC"> zeroes is</font><font color="#E5E5E5"> F actually I could do that</font>

488
00:26:21,090 --> 00:26:25,380
one<font color="#CCCCCC"> in my head</font><font color="#E5E5E5"> pretty easily</font><font color="#CCCCCC"> and other</font>

489
00:26:25,380 --> 00:26:27,510
ones again you can drop<font color="#E5E5E5"> down</font><font color="#CCCCCC"> to a bit</font>

490
00:26:27,510 --> 00:26:30,840
level<font color="#E5E5E5"> representation</font><font color="#CCCCCC"> mapa didn't the</font>

491
00:26:30,840 --> 00:26:32,730
result you're<font color="#CCCCCC"> looking for into bits</font><font color="#E5E5E5"> and</font>

492
00:26:32,730 --> 00:26:38,040
then convert back<font color="#CCCCCC"> to hex this class</font>

493
00:26:38,040 --> 00:26:40,530
isn't<font color="#E5E5E5"> really going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be about like some</font>

494
00:26:40,530 --> 00:26:42,480
people can actually<font color="#E5E5E5"> do addition and</font>

495
00:26:42,480 --> 00:26:44,550
multiplication and<font color="#E5E5E5"> base</font><font color="#CCCCCC"> 16 in their head</font>

496
00:26:44,550 --> 00:26:47,610
<font color="#E5E5E5">I can't do that and I figure</font><font color="#CCCCCC"> if</font>

497
00:26:47,610 --> 00:26:48,870
computers<font color="#E5E5E5"> can do it</font>

498
00:26:48,870 --> 00:26:54,560
why<font color="#CCCCCC"> snuggler now one</font><font color="#E5E5E5"> thing that's a</font>

499
00:26:54,560 --> 00:26:59,280
common got you and see both because

500
00:26:59,280 --> 00:27:00,870
people don't know<font color="#E5E5E5"> the difference or they</font>

501
00:27:00,870 --> 00:27:03,870
do and they forget or<font color="#CCCCCC"> they make stupid</font>

502
00:27:03,870 --> 00:27:06,930
mistakes<font color="#CCCCCC"> I do all the time is</font><font color="#E5E5E5"> that the</font>

503
00:27:06,930 --> 00:27:09,240
other there's some other operations like

504
00:27:09,240 --> 00:27:11,670
<font color="#E5E5E5">another kind of and that another kind of</font>

505
00:27:11,670 --> 00:27:14,610
<font color="#E5E5E5">or another kind of not and see and</font>

506
00:27:14,610 --> 00:27:16,950
they're really really really<font color="#CCCCCC"> different</font>

507
00:27:16,950 --> 00:27:20,490
from<font color="#E5E5E5"> the single ampersand version so in</font>

508
00:27:20,490 --> 00:27:22,650
<font color="#E5E5E5">this logic which</font><font color="#CCCCCC"> is a different logic</font>

509
00:27:22,650 --> 00:27:24,510
there's only two values<font color="#CCCCCC"> something is</font>

510
00:27:24,510 --> 00:27:26,280
<font color="#E5E5E5">either false or it's true</font>

511
00:27:26,280 --> 00:27:29,730
false is only<font color="#CCCCCC"> wait to</font><font color="#E5E5E5"> represent is the</font>

512
00:27:29,730 --> 00:27:33,150
<font color="#E5E5E5">value 0 but anything that's</font><font color="#CCCCCC"> nonzero is</font>

513
00:27:33,150 --> 00:27:36,540
considered true in this context<font color="#E5E5E5"> and so</font>

514
00:27:36,540 --> 00:27:40,500
when I say something<font color="#CCCCCC"> is and if they're</font>

515
00:27:40,500 --> 00:27:44,880
both<font color="#CCCCCC"> non 0 then they're both</font><font color="#E5E5E5"> true and</font>

516
00:27:44,880 --> 00:27:47,190
I'll generate the value true<font color="#E5E5E5"> but the</font>

517
00:27:47,190 --> 00:27:52,160
value I generate will always be<font color="#CCCCCC"> 1 so</font>

518
00:27:52,160 --> 00:27:55,320
this<font color="#E5E5E5"> is actually a useful we do it all</font>

519
00:27:55,320 --> 00:27:57,720
the<font color="#CCCCCC"> time but keep in mind underneath it</font>

520
00:27:57,720 --> 00:27:59,640
it's kind of a funky<font color="#CCCCCC"> way to think about</font>

521
00:27:59,640 --> 00:28:03,480
things<font color="#E5E5E5"> so if we negate the value for 1</font>

522
00:28:03,480 --> 00:28:07,230
we get 0 because<font color="#CCCCCC"> for one is and if by</font>

523
00:28:07,230 --> 00:28:08,340
<font color="#E5E5E5">the way don't make the mistake of</font>

524
00:28:08,340 --> 00:28:11,250
calling<font color="#CCCCCC"> 41</font><font color="#E5E5E5"> because it's not it's for one</font>

525
00:28:11,250 --> 00:28:15,410
<font color="#E5E5E5">because it's basic</font><font color="#CCCCCC"> - anyways Oh</font>

526
00:28:16,130 --> 00:28:19,260
<font color="#CCCCCC">41 is nonzero and so its complement is</font>

527
00:28:19,260 --> 00:28:22,290
false<font color="#E5E5E5"> in this logic</font><font color="#CCCCCC"> it's a different</font>

528
00:28:22,290 --> 00:28:26,130
thing in<font color="#E5E5E5"> between 0 and on the other hand</font>

529
00:28:26,130 --> 00:28:27,150
<font color="#E5E5E5">0</font>

530
00:28:27,150 --> 00:28:28,250
<font color="#CCCCCC">it's companies</font>

531
00:28:28,250 --> 00:28:31,280
not negation this<font color="#E5E5E5"> census disabil you</font>

532
00:28:31,280 --> 00:28:36,170
want and so in<font color="#CCCCCC"> fact one of the tricks</font>

533
00:28:36,170 --> 00:28:37,820
you'll use in<font color="#E5E5E5"> your first way up is if</font>

534
00:28:37,820 --> 00:28:40,760
you do two knots<font color="#E5E5E5"> by the way I always</font>

535
00:28:40,760 --> 00:28:44,210
<font color="#E5E5E5">just say bang here bang bang we value</font>

536
00:28:44,210 --> 00:28:46,310
<font color="#E5E5E5">it's a waiting to convert it if it's</font>

537
00:28:46,310 --> 00:28:48,200
zero it<font color="#E5E5E5"> will stay zero because it's</font>

538
00:28:48,200 --> 00:28:51,970
anything<font color="#CCCCCC"> non</font><font color="#E5E5E5"> zero will convert</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> one</font>

539
00:28:51,970 --> 00:28:55,240
<font color="#E5E5E5">the other thing that's important</font><font color="#CCCCCC"> about</font>

540
00:28:55,240 --> 00:28:58,550
these operations both end in the<font color="#CCCCCC"> bore</font><font color="#E5E5E5"> is</font>

541
00:28:58,550 --> 00:29:01,640
<font color="#E5E5E5">that they are they have a certain early</font>

542
00:29:01,640 --> 00:29:05,420
termination<font color="#E5E5E5"> trick and so you can say for</font>

543
00:29:05,420 --> 00:29:11,000
example<font color="#E5E5E5"> this bottom one says if I have a</font>

544
00:29:11,000 --> 00:29:15,950
pointer called<font color="#CCCCCC"> T I can safely say P</font>

545
00:29:15,950 --> 00:29:18,320
ampersand ampersand<font color="#E5E5E5"> start it and what</font>

546
00:29:18,320 --> 00:29:20,330
<font color="#E5E5E5">will</font><font color="#CCCCCC"> happen is look what will this</font>

547
00:29:20,330 --> 00:29:26,530
return if P is a null pointer<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and</font>

548
00:29:26,530 --> 00:29:29,480
what it<font color="#E5E5E5"> will know it's that result is</font>

549
00:29:29,480 --> 00:29:31,280
going to<font color="#E5E5E5"> be zero because zero and</font>

550
00:29:31,280 --> 00:29:33,910
<font color="#CCCCCC">anything is zero so it won't</font><font color="#E5E5E5"> actually</font>

551
00:29:33,910 --> 00:29:38,870
evaluate the star P and that's good

552
00:29:38,870 --> 00:29:40,790
because if he were a null pointer that

553
00:29:40,790 --> 00:29:44,230
<font color="#E5E5E5">is dark he would give you an error so</font>

554
00:29:44,230 --> 00:29:46,370
you'll think<font color="#E5E5E5"> about a few and you</font>

555
00:29:46,370 --> 00:29:48,890
<font color="#CCCCCC">probably know</font><font color="#E5E5E5"> this already that if you</font>

556
00:29:48,890 --> 00:29:51,340
have a long sequence and use<font color="#E5E5E5"> ampersand</font>

557
00:29:51,340 --> 00:29:58,040
<font color="#E5E5E5">to</font><font color="#CCCCCC"> four vertical</font><font color="#E5E5E5"> bars to to note it will</font>

558
00:29:58,040 --> 00:29:59,960
<font color="#E5E5E5">only evaluate as much the expression</font>

559
00:29:59,960 --> 00:30:01,880
enhanced you from left to right in order

560
00:30:01,880 --> 00:30:06,040
<font color="#E5E5E5">to determine whether it's true or false</font>

561
00:30:07,570 --> 00:30:10,010
anyways<font color="#E5E5E5"> you've probably heard this</font>

562
00:30:10,010 --> 00:30:13,190
before<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if I make this mistake even</font>

563
00:30:13,190 --> 00:30:15,140
<font color="#E5E5E5">now not because I</font><font color="#CCCCCC"> don't know the</font>

564
00:30:15,140 --> 00:30:17,390
<font color="#E5E5E5">difference but</font><font color="#CCCCCC"> because I'm not very</font><font color="#E5E5E5"> good</font>

565
00:30:17,390 --> 00:30:23,240
<font color="#E5E5E5">tightness so</font><font color="#CCCCCC"> another class of operations</font>

566
00:30:23,240 --> 00:30:25,160
<font color="#E5E5E5">that you probably haven't spent a lot</font><font color="#CCCCCC"> of</font>

567
00:30:25,160 --> 00:30:29,000
time using<font color="#E5E5E5"> yet less here Joe experiences</font>

568
00:30:29,000 --> 00:30:32,090
shift operations and you can say<font color="#CCCCCC"> shift</font>

569
00:30:32,090 --> 00:30:34,850
something<font color="#E5E5E5"> left or shifted right but the</font>

570
00:30:34,850 --> 00:30:36,740
curious thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> certain to different</font>

571
00:30:36,740 --> 00:30:39,070
standard conventions for

572
00:30:39,070 --> 00:30:42,400
that will<font color="#E5E5E5"> make a lot of sense</font><font color="#CCCCCC"> later</font>

573
00:30:42,400 --> 00:30:45,040
today or first thing<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the lecture next</font>

574
00:30:45,040 --> 00:30:47,110
time<font color="#E5E5E5"> but they don't make any sense at</font>

575
00:30:47,110 --> 00:30:50,470
<font color="#E5E5E5">all</font><font color="#CCCCCC"> in total but</font><font color="#E5E5E5"> I'll go over the rules</font>

576
00:30:50,470 --> 00:30:53,350
<font color="#E5E5E5">anyhow</font><font color="#CCCCCC"> so in general what happens</font><font color="#E5E5E5"> when</font>

577
00:30:53,350 --> 00:30:58,120
you<font color="#CCCCCC"> shift something left is you just</font>

578
00:30:58,120 --> 00:31:00,340
<font color="#E5E5E5">slide</font><font color="#CCCCCC"> the bits over</font><font color="#E5E5E5"> that many positions</font>

579
00:31:00,340 --> 00:31:03,370
<font color="#E5E5E5">and you fill the the right hand side in</font>

580
00:31:03,370 --> 00:31:08,950
with<font color="#CCCCCC"> zeros and whatever</font><font color="#E5E5E5"> if there were</font>

581
00:31:08,950 --> 00:31:11,650
<font color="#CCCCCC">you know basically shift off the end</font>

582
00:31:11,650 --> 00:31:14,800
<font color="#E5E5E5">whatever was in the first three</font>

583
00:31:14,800 --> 00:31:17,590
positions<font color="#E5E5E5"> on the left before that will</font>

584
00:31:17,590 --> 00:31:22,120
just disappear<font color="#E5E5E5"> into nowhere shifting</font>

585
00:31:22,120 --> 00:31:23,200
right<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> sort of two different</font>

586
00:31:23,200 --> 00:31:25,360
<font color="#E5E5E5">conventions the one that sort of the</font>

587
00:31:25,360 --> 00:31:28,000
<font color="#CCCCCC">natural one is what's</font><font color="#E5E5E5"> called a logical</font>

588
00:31:28,000 --> 00:31:30,490
shift<font color="#E5E5E5"> meaning I do the same</font><font color="#CCCCCC"> IV</font><font color="#E5E5E5"> I shift</font>

589
00:31:30,490 --> 00:31:33,400
some bits over<font color="#CCCCCC"> I discard the ones that</font>

590
00:31:33,400 --> 00:31:38,290
are no<font color="#E5E5E5"> longer needed</font><font color="#CCCCCC"> and I fill it in</font>

591
00:31:38,290 --> 00:31:42,970
with<font color="#E5E5E5"> zeros but there's another kind of</font>

592
00:31:42,970 --> 00:31:44,950
shift called an arithmetic<font color="#E5E5E5"> shift</font><font color="#CCCCCC"> and</font>

593
00:31:44,950 --> 00:31:47,530
what it does is it replicates the

594
00:31:47,530 --> 00:31:51,280
leftmost bit of the the operand<font color="#E5E5E5"> argument</font>

595
00:31:51,280 --> 00:31:54,160
<font color="#E5E5E5">and that's why in this example</font><font color="#CCCCCC"> it's</font>

596
00:31:54,160 --> 00:32:00,090
<font color="#E5E5E5">shown and so as long as it's</font><font color="#CCCCCC"> zero there</font>

597
00:32:00,090 --> 00:32:03,490
then<font color="#E5E5E5"> arithmetic and logical</font><font color="#CCCCCC"> shift will</font>

598
00:32:03,490 --> 00:32:07,150
be<font color="#CCCCCC"> the same but</font><font color="#E5E5E5"> if this example shows in</font>

599
00:32:07,150 --> 00:32:12,790
this second case where there's a<font color="#E5E5E5"> a one</font>

600
00:32:12,790 --> 00:32:15,490
in that<font color="#E5E5E5"> most significant point now when</font>

601
00:32:15,490 --> 00:32:18,030
I do<font color="#CCCCCC"> a arithmetic shift</font><font color="#E5E5E5"> I will fill in</font>

602
00:32:18,030 --> 00:32:21,730
with<font color="#E5E5E5"> once which is not at all intuitive</font>

603
00:32:21,730 --> 00:32:24,640
<font color="#E5E5E5">that's a useful or a good idea but it</font>

604
00:32:24,640 --> 00:32:26,380
turns out when these are representing

605
00:32:26,380 --> 00:32:28,360
potentially negative values<font color="#E5E5E5"> this will</font>

606
00:32:28,360 --> 00:32:31,360
<font color="#CCCCCC">we'll get into</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> that's actually a</font>

607
00:32:31,360 --> 00:32:33,640
<font color="#E5E5E5">very useful operation</font><font color="#CCCCCC"> think of a way</font><font color="#E5E5E5"> to</font>

608
00:32:33,640 --> 00:32:36,780
divide something<font color="#E5E5E5"> by a power of two</font>

609
00:32:36,780 --> 00:32:40,840
<font color="#E5E5E5">roughly speaking so what we'll see in</font>

610
00:32:40,840 --> 00:32:43,120
<font color="#CCCCCC">just a little while a</font><font color="#E5E5E5"> while why</font><font color="#CCCCCC"> do you</font>

611
00:32:43,120 --> 00:32:48,520
distinction now what are they<font color="#E5E5E5"> and as you</font>

612
00:32:48,520 --> 00:32:50,600
know<font color="#E5E5E5"> and see you can</font><font color="#CCCCCC"> represent those</font>

613
00:32:50,600 --> 00:32:55,610
with double left double less than your

614
00:32:55,610 --> 00:33:06,200
double in whether a whether a given

615
00:33:06,200 --> 00:33:09,340
expression will evaluate<font color="#E5E5E5"> using a</font>

616
00:33:09,340 --> 00:33:11,870
arithmetic or logical shift<font color="#E5E5E5"> is a little</font>

617
00:33:11,870 --> 00:33:14,480
bit of tricky<font color="#CCCCCC"> we'll talk about it later</font>

618
00:33:14,480 --> 00:33:18,320
<font color="#CCCCCC">there's only one way to do it the</font><font color="#E5E5E5"> other</font>

619
00:33:18,320 --> 00:33:23,080
thing<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> just general warning is</font>

620
00:33:23,080 --> 00:33:25,039
there's no<font color="#CCCCCC"> it's sort of</font><font color="#E5E5E5"> strict</font>

621
00:33:25,039 --> 00:33:27,500
interpretation<font color="#CCCCCC"> and see of what it would</font>

622
00:33:27,500 --> 00:33:29,030
mean to shift<font color="#E5E5E5"> something by a negative</font>

623
00:33:29,030 --> 00:33:30,580
<font color="#CCCCCC">number like you might think that</font>

624
00:33:30,580 --> 00:33:33,169
shifting<font color="#E5E5E5"> left by minus one should be the</font>

625
00:33:33,169 --> 00:33:34,940
same as shifting<font color="#E5E5E5"> right by</font><font color="#CCCCCC"> the plus one</font>

626
00:33:34,940 --> 00:33:38,840
but there's no thanks

627
00:33:38,840 --> 00:33:40,780
unlike<font color="#E5E5E5"> you your machine will do that</font>

628
00:33:40,780 --> 00:33:43,159
simply if<font color="#CCCCCC"> you say shift in number left</font>

629
00:33:43,159 --> 00:33:47,720
by 32 or<font color="#E5E5E5"> by say</font><font color="#CCCCCC"> 100</font><font color="#E5E5E5"> you'd expect maybe</font>

630
00:33:47,720 --> 00:33:50,539
you should<font color="#E5E5E5"> get all zeros but that may or</font>

631
00:33:50,539 --> 00:33:53,630
may<font color="#CCCCCC"> not happen</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> see as a language</font>

632
00:33:53,630 --> 00:33:55,610
<font color="#E5E5E5">makes no particular statement about</font>

633
00:33:55,610 --> 00:33:58,730
<font color="#CCCCCC">motion and that's</font><font color="#E5E5E5"> by the way one</font><font color="#CCCCCC"> thing</font>

634
00:33:58,730 --> 00:34:01,100
we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> see with C as a language is</font>

635
00:34:01,100 --> 00:34:04,270
<font color="#E5E5E5">that there's huge parts of it that are</font>

636
00:34:04,270 --> 00:34:05,570
undefined

637
00:34:05,570 --> 00:34:07,760
meaning that<font color="#E5E5E5"> basically the compiler</font>

638
00:34:07,760 --> 00:34:11,210
writer can choose how something that<font color="#CCCCCC"> is</font>

639
00:34:11,210 --> 00:34:14,359
implemented and it may not do the<font color="#CCCCCC"> same</font>

640
00:34:14,359 --> 00:34:16,399
thing<font color="#CCCCCC"> from one machine</font><font color="#E5E5E5"> to another to</font>

641
00:34:16,399 --> 00:34:19,609
another<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> a kind</font><font color="#CCCCCC"> of a</font>

642
00:34:19,609 --> 00:34:22,909
disturbing feature when you<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write</font>

643
00:34:22,909 --> 00:34:24,980
programs that<font color="#E5E5E5"> are designed to run across</font>

644
00:34:24,980 --> 00:34:27,440
multiple machines<font color="#CCCCCC"> and compilers that was</font>

645
00:34:27,440 --> 00:34:31,460
one of<font color="#CCCCCC"> the design goals of</font><font color="#E5E5E5"> Java in fact</font>

646
00:34:31,460 --> 00:34:32,929
was to make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> everything was</font>

647
00:34:32,929 --> 00:34:35,600
defined so<font color="#CCCCCC"> that programs</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font>

648
00:34:35,600 --> 00:34:39,980
completely portable<font color="#E5E5E5"> but we're not using</font>

649
00:34:39,980 --> 00:34:41,840
<font color="#E5E5E5">Java in this course so we're gonna be</font>

650
00:34:41,840 --> 00:34:48,790
stuck with C and<font color="#E5E5E5"> its quirks so</font>

651
00:34:49,780 --> 00:34:55,780
now<font color="#E5E5E5"> just rolling along there's two main</font>

652
00:34:55,780 --> 00:34:58,480
classes<font color="#E5E5E5"> and numbers we're going to</font>

653
00:34:58,480 --> 00:35:00,770
<font color="#E5E5E5">integer numbers we're going to want</font><font color="#CCCCCC"> to</font>

654
00:35:00,770 --> 00:35:04,390
make use of in this course and one is

655
00:35:04,390 --> 00:35:08,020
unsigned numbers meaning values that are

656
00:35:08,020 --> 00:35:12,290
<font color="#E5E5E5">between 0 0 or positive and so we'll</font>

657
00:35:12,290 --> 00:35:14,869
call those unsigned because they they

658
00:35:14,869 --> 00:35:16,790
<font color="#E5E5E5">don't need a sign to say whether it's</font>

659
00:35:16,790 --> 00:35:18,830
negative<font color="#CCCCCC"> or public</font><font color="#E5E5E5"> and then another</font>

660
00:35:18,830 --> 00:35:20,840
question number is if we refer to as

661
00:35:20,840 --> 00:35:27,650
<font color="#CCCCCC">assigned numbers and there's many</font>

662
00:35:27,650 --> 00:35:29,050
different<font color="#CCCCCC"> ways you could imagine</font>

663
00:35:29,050 --> 00:35:31,490
representing numbers<font color="#E5E5E5"> that may be</font>

664
00:35:31,490 --> 00:35:34,910
negative or positive<font color="#CCCCCC"> but the most common</font>

665
00:35:34,910 --> 00:35:38,359
by far and the way wool<font color="#CCCCCC"> mostly</font>

666
00:35:38,359 --> 00:35:40,880
<font color="#CCCCCC">considered is what's called</font><font color="#E5E5E5"> a two's</font>

667
00:35:40,880 --> 00:35:44,030
complement representation and the idea

668
00:35:44,030 --> 00:35:47,270
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that is if you look at it from bit</font>

669
00:35:47,270 --> 00:35:51,140
representation<font color="#E5E5E5"> the nonce ID number is</font>

670
00:35:51,140 --> 00:35:53,480
just<font color="#E5E5E5"> a familiar binary representation</font>

671
00:35:53,480 --> 00:35:56,030
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you have a series of</font><font color="#E5E5E5"> bits each is</font>

672
00:35:56,030 --> 00:35:59,990
weighted by<font color="#CCCCCC"> a power of</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> ah the tweets</font>

673
00:35:59,990 --> 00:36:01,790
<font color="#CCCCCC">complement it's the same idea</font><font color="#E5E5E5"> except the</font>

674
00:36:01,790 --> 00:36:04,609
<font color="#E5E5E5">most significant death has a negative</font>

675
00:36:04,609 --> 00:36:10,160
<font color="#E5E5E5">value associated with it and so</font><font color="#CCCCCC"> we'll</font>

676
00:36:10,160 --> 00:36:14,450
show some specific<font color="#CCCCCC"> examples of</font><font color="#E5E5E5"> it so</font>

677
00:36:14,450 --> 00:36:16,369
let's look at<font color="#E5E5E5"> two</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> complement is</font><font color="#CCCCCC"> the</font>

678
00:36:16,369 --> 00:36:21,320
less intuitive one so the number<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> for</font>

679
00:36:21,320 --> 00:36:28,100
example<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> positive number so the</font>

680
00:36:28,100 --> 00:36:31,280
first<font color="#CCCCCC"> bit the sign bit</font><font color="#E5E5E5"> will be</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and you</font>

681
00:36:31,280 --> 00:36:34,520
<font color="#E5E5E5">see that the</font><font color="#CCCCCC"> waiting</font><font color="#E5E5E5"> of those values is</font>

682
00:36:34,520 --> 00:36:36,200
according<font color="#E5E5E5"> to formula showed you before</font>

683
00:36:36,200 --> 00:36:39,500
that<font color="#E5E5E5"> everything but the leftmost bit has</font>

684
00:36:39,500 --> 00:36:43,100
a positive weight in the left<font color="#CCCCCC"> fifth</font><font color="#E5E5E5"> one</font>

685
00:36:43,100 --> 00:36:45,369
has a

686
00:36:46,020 --> 00:36:51,620
<font color="#E5E5E5">a negative</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> negative power of</font><font color="#CCCCCC"> two</font>

687
00:36:51,620 --> 00:36:55,620
<font color="#E5E5E5">valuation and the other thing you'll</font>

688
00:36:55,620 --> 00:36:58,560
<font color="#CCCCCC">notice is that negative</font><font color="#E5E5E5"> value is it's</font>

689
00:36:58,560 --> 00:37:01,770
more<font color="#E5E5E5"> negative you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> it's a it's a</font>

690
00:37:01,770 --> 00:37:04,830
<font color="#CCCCCC">heavyweight</font><font color="#E5E5E5"> but say it's magnitude is</font>

691
00:37:04,830 --> 00:37:07,620
large<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> two to the</font><font color="#E5E5E5"> W the word size</font>

692
00:37:07,620 --> 00:37:12,330
here is 5 so 2 to the<font color="#E5E5E5"> W minus 1 5 minus</font>

693
00:37:12,330 --> 00:37:19,950
1 is 4 minus 2 to the<font color="#CCCCCC"> fourth is X so</font>

694
00:37:19,950 --> 00:37:22,350
we'd represent<font color="#CCCCCC"> negative 10 then by</font>

695
00:37:22,350 --> 00:37:25,110
saying<font color="#E5E5E5"> when you start with minus 16 and</font>

696
00:37:25,110 --> 00:37:27,600
<font color="#E5E5E5">what sets it is a little</font><font color="#CCCCCC"> bit more</font>

697
00:37:27,600 --> 00:37:30,000
<font color="#E5E5E5">negative than a lot so I'll add</font><font color="#CCCCCC"> that</font>

698
00:37:30,000 --> 00:37:33,090
form 2<font color="#CCCCCC"> to that in order to get it to be</font>

699
00:37:33,090 --> 00:37:36,630
<font color="#CCCCCC">minus town and</font><font color="#E5E5E5"> that's the general scheme</font>

700
00:37:36,630 --> 00:37:39,150
of<font color="#E5E5E5"> things that we a negative</font><font color="#CCCCCC"> number we</font>

701
00:37:39,150 --> 00:37:41,370
start by making<font color="#CCCCCC"> it very negative and</font>

702
00:37:41,370 --> 00:37:44,670
then we<font color="#E5E5E5"> add back positive powers of 2 to</font>

703
00:37:44,670 --> 00:37:46,620
bring it back toward<font color="#CCCCCC"> zero up to the</font>

704
00:37:46,620 --> 00:37:53,520
value<font color="#CCCCCC"> oh and so for example this table</font>

705
00:37:53,520 --> 00:37:58,230
<font color="#CCCCCC">shows</font><font color="#E5E5E5"> if you want to represent 15 to 13</font>

706
00:37:58,230 --> 00:38:02,310
or negative 15 to 13 16-bit numbers then

707
00:38:02,310 --> 00:38:04,380
what you rely on is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact that you</font>

708
00:38:04,380 --> 00:38:08,070
can set this most significant bit<font color="#E5E5E5"> to</font>

709
00:38:08,070 --> 00:38:10,110
either 1 or 0<font color="#E5E5E5"> and it has a weight in</font>

710
00:38:10,110 --> 00:38:13,470
<font color="#E5E5E5">this case of two to the</font><font color="#CCCCCC"> fifteenth or or</font>

711
00:38:13,470 --> 00:38:19,920
<font color="#CCCCCC">thirty two thousand seven six to it so</font>

712
00:38:19,920 --> 00:38:23,910
just using<font color="#E5E5E5"> that very simple set of ideas</font>

713
00:38:23,910 --> 00:38:27,450
we<font color="#E5E5E5"> can actually explore a lot about what</font>

714
00:38:27,450 --> 00:38:29,130
numbers<font color="#E5E5E5"> can be represented</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> the</font>

715
00:38:29,130 --> 00:38:32,850
representations will<font color="#CCCCCC"> cross so for</font>

716
00:38:32,850 --> 00:38:34,410
example let's look<font color="#E5E5E5"> at the unsigned case</font>

717
00:38:34,410 --> 00:38:36,810
the smallest number we can represent it

718
00:38:36,810 --> 00:38:41,790
is obviously<font color="#E5E5E5"> zero because we can't</font>

719
00:38:41,790 --> 00:38:44,190
represent any negative numbers but the

720
00:38:44,190 --> 00:38:46,620
largest one<font color="#E5E5E5"> we can get is if we pile in</font>

721
00:38:46,620 --> 00:38:48,650
all the ones<font color="#E5E5E5"> we can into that</font>

722
00:38:48,650 --> 00:38:51,710
so you already<font color="#E5E5E5"> saw it with a</font><font color="#CCCCCC"> 4-bit</font>

723
00:38:51,710 --> 00:38:55,970
number<font color="#CCCCCC"> it's f-111</font><font color="#E5E5E5"> one has value 15 which</font>

724
00:38:55,970 --> 00:38:59,270
is<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> 4th minus</font><font color="#E5E5E5"> 1 not to the 4</font>

725
00:38:59,270 --> 00:39:04,460
minus<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the 4th minus and so in</font>

726
00:39:04,460 --> 00:39:07,000
general<font color="#E5E5E5"> a bunch of ones will be</font>

727
00:39:07,000 --> 00:39:09,830
something that's apart<font color="#CCCCCC"> almost</font><font color="#E5E5E5"> a power of</font>

728
00:39:09,830 --> 00:39:14,300
<font color="#CCCCCC">2 but</font><font color="#E5E5E5"> not quite similarly we can think</font>

729
00:39:14,300 --> 00:39:17,750
<font color="#E5E5E5">about</font><font color="#CCCCCC"> two's complement numbers we can</font>

730
00:39:17,750 --> 00:39:20,630
have just<font color="#E5E5E5"> that negative bit be our only</font>

731
00:39:20,630 --> 00:39:22,910
value that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> most negative value you</font>

732
00:39:22,910 --> 00:39:25,850
can possibly have and<font color="#E5E5E5"> the most positive</font>

733
00:39:25,850 --> 00:39:28,220
values if we<font color="#E5E5E5"> turn off</font><font color="#CCCCCC"> that negative bit</font>

734
00:39:28,220 --> 00:39:31,460
and pile in all the positive parts of<font color="#E5E5E5"> 2</font>

735
00:39:31,460 --> 00:39:38,540
we can<font color="#CCCCCC"> and it will be in this case</font><font color="#E5E5E5"> 2 to</font>

736
00:39:38,540 --> 00:39:43,400
the W minus 1 minus<font color="#CCCCCC"> 1 and we can also if</font>

737
00:39:43,400 --> 00:39:46,970
we turn on the negative bit and all the

738
00:39:46,970 --> 00:39:49,340
positive bits<font color="#E5E5E5"> won't end up</font><font color="#CCCCCC"> with minus 1</font>

739
00:39:49,340 --> 00:39:51,950
<font color="#E5E5E5">so</font><font color="#CCCCCC"> 2 almost</font><font color="#E5E5E5"> canceled each other out but</font>

740
00:39:51,950 --> 00:39:54,020
not quite and in<font color="#E5E5E5"> general if you're</font>

741
00:39:54,020 --> 00:39:57,170
seeing a hex number it's a number it

742
00:39:57,170 --> 00:40:00,440
goes<font color="#E5E5E5"> ffff</font><font color="#CCCCCC"> wah-wah-wah-wah</font>

743
00:40:00,440 --> 00:40:02,720
most likely what it is is<font color="#E5E5E5"> the negative</font>

744
00:40:02,720 --> 00:40:05,180
number you know you're<font color="#E5E5E5"> looking at the</font>

745
00:40:05,180 --> 00:40:08,680
whole string of ones that<font color="#CCCCCC"> are sort</font><font color="#E5E5E5"> of</font>

746
00:40:08,680 --> 00:40:12,590
<font color="#E5E5E5">the next very negative value a bunch of</font>

747
00:40:12,590 --> 00:40:14,570
<font color="#E5E5E5">ones to sort of bring it closer to</font><font color="#CCCCCC"> zero</font>

748
00:40:14,570 --> 00:40:20,990
and<font color="#E5E5E5"> then it's whatever it's left over so</font>

749
00:40:20,990 --> 00:40:22,970
for example to be more<font color="#CCCCCC"> concrete if we</font>

750
00:40:22,970 --> 00:40:28,220
have 16 bits then<font color="#E5E5E5"> its largest value of</font>

751
00:40:28,220 --> 00:40:32,150
the decimal number<font color="#E5E5E5"> is 2 to</font><font color="#CCCCCC"> the 16th</font>

752
00:40:32,150 --> 00:40:38,810
minus<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> so unsigned number or is a sign</font>

753
00:40:38,810 --> 00:40:44,180
number it's<font color="#E5E5E5"> 2 to the 15</font><font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> work and</font>

754
00:40:44,180 --> 00:40:47,360
<font color="#CCCCCC">some weight a</font><font color="#E5E5E5"> negative</font><font color="#CCCCCC"> number so it's a</font>

755
00:40:47,360 --> 00:40:51,890
<font color="#CCCCCC">0</font><font color="#E5E5E5"> qualified which</font><font color="#CCCCCC"> ones minus 1 is</font><font color="#E5E5E5"> always</font>

756
00:40:51,890 --> 00:40:55,670
a bunch of<font color="#E5E5E5"> ones and zeros always a bunch</font>

757
00:40:55,670 --> 00:40:58,750
<font color="#E5E5E5">of</font><font color="#CCCCCC"> zeros</font><font color="#E5E5E5"> so one of the curious</font>

758
00:40:58,750 --> 00:41:00,369
properties of this

759
00:41:00,369 --> 00:41:04,269
<font color="#CCCCCC">as you'll see that there's a</font><font color="#E5E5E5"> symmetry in</font>

760
00:41:04,269 --> 00:41:07,059
<font color="#CCCCCC">the representation</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I can</font><font color="#E5E5E5"> represent</font>

761
00:41:07,059 --> 00:41:10,960
a bigger<font color="#E5E5E5"> an absolute value number as a</font>

762
00:41:10,960 --> 00:41:14,950
negative<font color="#CCCCCC"> value</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> I can as a positive</font>

763
00:41:14,950 --> 00:41:18,160
<font color="#E5E5E5">value</font><font color="#CCCCCC"> so anyway one figure out why there</font>

764
00:41:18,160 --> 00:41:19,960
<font color="#E5E5E5">is sort of a missing positive number in</font>

765
00:41:19,960 --> 00:41:26,859
there yes<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need space for</font><font color="#CCCCCC"> zero</font>

766
00:41:26,859 --> 00:41:30,609
<font color="#E5E5E5">good so anything with a</font><font color="#CCCCCC"> 1 in</font><font color="#E5E5E5"> its first</font>

767
00:41:30,609 --> 00:41:32,920
digit first<font color="#E5E5E5"> bit it's going to be a</font>

768
00:41:32,920 --> 00:41:33,719
negative number

769
00:41:33,719 --> 00:41:35,950
anything with<font color="#CCCCCC"> the zero</font><font color="#E5E5E5"> on its first bit</font>

770
00:41:35,950 --> 00:41:40,719
will be<font color="#E5E5E5"> either all zeros value 0 or ' so</font>

771
00:41:40,719 --> 00:41:43,089
<font color="#E5E5E5">that's why there's this</font><font color="#CCCCCC"> asymmetry</font><font color="#E5E5E5"> and</font>

772
00:41:43,089 --> 00:41:46,119
it's one<font color="#CCCCCC"> of those things it doesn't</font>

773
00:41:46,119 --> 00:41:47,920
<font color="#E5E5E5">really matter most of time but when</font><font color="#CCCCCC"> it</font>

774
00:41:47,920 --> 00:41:51,960
does it's<font color="#CCCCCC"> really an annoying ok</font><font color="#E5E5E5"> Oh</font>

775
00:41:52,140 --> 00:41:55,900
<font color="#CCCCCC">interest I</font><font color="#E5E5E5"> mentioned done on pretty much</font>

776
00:41:55,900 --> 00:41:59,979
any computer you encounter nowadays<font color="#E5E5E5"> you</font>

777
00:41:59,979 --> 00:42:02,469
can have sort<font color="#E5E5E5"> of words you can operate</font>

778
00:42:02,469 --> 00:42:06,369
<font color="#E5E5E5">on values</font><font color="#CCCCCC"> that are either</font><font color="#E5E5E5"> 8 bits or a</font>

779
00:42:06,369 --> 00:42:11,019
byte 16 bits 32 bits<font color="#E5E5E5"> or 64 bits are all</font>

780
00:42:11,019 --> 00:42:14,069
supported as data types in the language

781
00:42:14,069 --> 00:42:22,359
up and you can see now that if X 32 is I

782
00:42:22,359 --> 00:42:25,599
<font color="#E5E5E5">mentioned before</font><font color="#CCCCCC"> 2 to the 32 is around 4</font>

783
00:42:25,599 --> 00:42:29,369
billion by<font color="#E5E5E5"> the way</font>

784
00:42:53,440 --> 00:42:57,670
<font color="#CCCCCC">10:24 it's about</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same mystical</font>

785
00:42:57,700 --> 00:43:00,609
<font color="#CCCCCC">sounds</font><font color="#E5E5E5"> like the kind of stupid</font><font color="#CCCCCC"> thing but</font>

786
00:43:00,609 --> 00:43:04,220
when I see it number 2 to the 32nd and I

787
00:43:04,220 --> 00:43:06,369
<font color="#E5E5E5">one year when you're how big that is</font>

788
00:43:06,369 --> 00:43:10,220
well I see<font color="#CCCCCC"> that it's 2 to the 30th which</font>

789
00:43:10,220 --> 00:43:14,230
is the same<font color="#CCCCCC"> as around</font><font color="#E5E5E5"> 10 of the night</font>

790
00:43:14,230 --> 00:43:18,410
<font color="#E5E5E5">plus</font><font color="#CCCCCC"> 2 more that's a</font><font color="#E5E5E5"> 4 and so it's</font>

791
00:43:18,410 --> 00:43:20,930
around 4 billion of course<font color="#E5E5E5"> not exactly</font>

792
00:43:20,930 --> 00:43:23,799
as you can see<font color="#E5E5E5"> but if somebody sort of</font>

793
00:43:23,799 --> 00:43:27,200
wants to<font color="#E5E5E5"> throw around numbers and you</font>

794
00:43:27,200 --> 00:43:29,000
want to get some order<font color="#E5E5E5"> of magnitude</font>

795
00:43:29,000 --> 00:43:30,710
sensitive this is actually<font color="#E5E5E5"> fairly easy</font>

796
00:43:30,710 --> 00:43:34,910
<font color="#CCCCCC">so some people say that</font><font color="#E5E5E5"> Microsoft switch</font>

797
00:43:34,910 --> 00:43:37,099
to<font color="#CCCCCC"> 64-bit machines because they couldn't</font>

798
00:43:37,099 --> 00:43:39,740
represent<font color="#E5E5E5"> Bill Gates is net worth as a</font>

799
00:43:39,740 --> 00:43:45,500
32-bit good news is<font color="#CCCCCC"> we've got a long</font>

800
00:43:45,500 --> 00:43:46,160
ways<font color="#CCCCCC"> to go</font>

801
00:43:46,160 --> 00:43:53,720
we 64-bit numbers<font color="#CCCCCC"> before</font><font color="#E5E5E5"> so in general</font>

802
00:43:53,720 --> 00:43:55,819
as I mentioned<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a sort of</font>

803
00:43:55,819 --> 00:43:58,339
<font color="#CCCCCC">asymmetry at the range</font><font color="#E5E5E5"> and of course you</font>

804
00:43:58,339 --> 00:44:01,549
also<font color="#CCCCCC"> notice that on</font><font color="#E5E5E5"> the unsigned side we</font>

805
00:44:01,549 --> 00:44:04,069
can represent the number of this because

806
00:44:04,069 --> 00:44:06,109
we can<font color="#E5E5E5"> use all the bits in the positive</font>

807
00:44:06,109 --> 00:44:09,289
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> we can get roughly twice the</font><font color="#CCCCCC"> value</font>

808
00:44:09,289 --> 00:44:12,920
others so if you're<font color="#E5E5E5"> being careful in C</font>

809
00:44:12,920 --> 00:44:16,309
or<font color="#CCCCCC"> any</font><font color="#E5E5E5"> language for that matter you</font>

810
00:44:16,309 --> 00:44:18,890
<font color="#E5E5E5">should not you know be too casual about</font>

811
00:44:18,890 --> 00:44:22,039
<font color="#E5E5E5">assuming this range of numbers that</font>

812
00:44:22,039 --> 00:44:24,109
numbers there's never a guarantee that

813
00:44:24,109 --> 00:44:26,510
<font color="#CCCCCC">all machines out there these night ever</font>

814
00:44:26,510 --> 00:44:28,910
wanted program use this two's complement

815
00:44:28,910 --> 00:44:32,329
representation so<font color="#E5E5E5"> these built in to see</font>

816
00:44:32,329 --> 00:44:34,970
there's a special include library file

817
00:44:34,970 --> 00:44:38,660
called limit<font color="#CCCCCC"> h that define the maximum</font>

818
00:44:38,660 --> 00:44:41,480
<font color="#E5E5E5">minimum values of</font><font color="#CCCCCC"> a certain standard</font>

819
00:44:41,480 --> 00:44:44,260
<font color="#E5E5E5">numeric</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> standard data types and</font>

820
00:44:44,260 --> 00:44:46,880
those should be<font color="#E5E5E5"> correct for the</font>

821
00:44:46,880 --> 00:44:48,859
particular<font color="#CCCCCC"> machine or compiler that</font>

822
00:44:48,859 --> 00:44:52,190
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> working that said a lot of people</font>

823
00:44:52,190 --> 00:44:53,829
cheat and

824
00:44:53,829 --> 00:44:55,749
assume<font color="#CCCCCC"> that it has</font><font color="#E5E5E5"> these certain</font>

825
00:44:55,749 --> 00:45:05,099
<font color="#E5E5E5">particular values</font><font color="#CCCCCC"> okay so one of the</font>

826
00:45:06,779 --> 00:45:11,099
more curious<font color="#CCCCCC"> ideas that we'll look at</font>

827
00:45:11,099 --> 00:45:15,059
and we'll explore in various ways<font color="#E5E5E5"> is</font>

828
00:45:15,059 --> 00:45:18,339
what simulation then<font color="#E5E5E5"> probably if we look</font>

829
00:45:18,339 --> 00:45:21,009
at a given<font color="#E5E5E5"> bit pattern like what's shown</font>

830
00:45:21,009 --> 00:45:23,499
<font color="#CCCCCC">on the</font><font color="#E5E5E5"> left and in some cases we might</font>

831
00:45:23,499 --> 00:45:25,989
think that<font color="#E5E5E5"> is up unsigned number and</font>

832
00:45:25,989 --> 00:45:28,509
others is a two's complement number<font color="#E5E5E5"> how</font>

833
00:45:28,509 --> 00:45:30,130
do those two numbers relate to each

834
00:45:30,130 --> 00:45:32,499
other and<font color="#E5E5E5"> what property we'll see as</font>

835
00:45:32,499 --> 00:45:35,190
<font color="#CCCCCC">it's shown in green here is if they're</font>

836
00:45:35,190 --> 00:45:37,719
nonzero numbers<font color="#E5E5E5"> then they have the same</font>

837
00:45:37,719 --> 00:45:40,239
<font color="#CCCCCC">effect whether</font><font color="#E5E5E5"> it's an unsigned there</font>

838
00:45:40,239 --> 00:45:42,789
are two<font color="#CCCCCC"> compliment representation</font><font color="#E5E5E5"> but</font>

839
00:45:42,789 --> 00:45:44,319
<font color="#E5E5E5">you'll see there's a sort of curious</font>

840
00:45:44,319 --> 00:45:49,809
mapping between the unsigned numbers as

841
00:45:49,809 --> 00:45:51,880
they get bigger<font color="#E5E5E5"> when they have a one in</font>

842
00:45:51,880 --> 00:45:56,079
their<font color="#E5E5E5"> white position and and the</font>

843
00:45:56,079 --> 00:45:57,700
corresponding two's complement number

844
00:45:57,700 --> 00:45:59,049
that they're actually there's a<font color="#E5E5E5"> delta</font>

845
00:45:59,049 --> 00:46:05,259
<font color="#E5E5E5">there of exactly</font><font color="#CCCCCC"> sixteen and so there's</font>

846
00:46:05,259 --> 00:46:08,079
some kind<font color="#CCCCCC"> of curious properties of that</font>

847
00:46:08,079 --> 00:46:10,479
<font color="#E5E5E5">mapping that we'll talk about</font>

848
00:46:10,479 --> 00:46:13,890
<font color="#CCCCCC">but now as part</font><font color="#E5E5E5"> of our experiment in</font>

849
00:46:13,890 --> 00:46:18,759
making progress in education<font color="#E5E5E5"> I'd like to</font>

850
00:46:18,759 --> 00:46:21,040
try this

851
00:46:21,040 --> 00:46:23,710
and we'll see<font color="#E5E5E5"> I know you're gonna</font><font color="#CCCCCC"> groan</font>

852
00:46:23,710 --> 00:46:32,920
<font color="#CCCCCC">and we might all go so if you go to the</font>

853
00:46:32,920 --> 00:46:46,900
course<font color="#CCCCCC"> webpage and this</font><font color="#E5E5E5"> is all right</font>

854
00:46:46,900 --> 00:46:53,590
<font color="#CCCCCC">I'll be amazed if this works but there's</font>

855
00:46:53,590 --> 00:46:58,960
a link<font color="#E5E5E5"> on the left to canvas which as</font>

856
00:46:58,960 --> 00:47:01,540
<font color="#E5E5E5">you know is is the new version</font><font color="#CCCCCC"> of</font>

857
00:47:01,540 --> 00:47:04,420
blackboard<font color="#CCCCCC"> and you've probably used it</font>

858
00:47:04,420 --> 00:47:07,270
more than either because I never<font color="#E5E5E5"> used</font>

859
00:47:07,270 --> 00:47:10,000
blackboard<font color="#E5E5E5"> but if you go to that page</font>

860
00:47:10,000 --> 00:47:13,770
for this course<font color="#E5E5E5"> which</font>

861
00:47:57,440 --> 00:47:59,850
are you finding some little problems

862
00:47:59,850 --> 00:48:08,940
involved with<font color="#CCCCCC"> all there should be</font><font color="#E5E5E5"> three</font>

863
00:48:08,940 --> 00:48:13,520
<font color="#E5E5E5">problems each involving some things</font>

864
00:48:20,990 --> 00:48:25,190
<font color="#CCCCCC">there should</font><font color="#E5E5E5"> be some way I</font><font color="#CCCCCC"> can</font>

865
00:49:05,930 --> 00:49:51,109
oh this is more<font color="#E5E5E5"> of an experiment I don't</font>

866
00:49:51,109 --> 00:49:52,280
<font color="#E5E5E5">think you'll be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do you have</font><font color="#CCCCCC"> to</font>

867
00:49:52,280 --> 00:49:54,410
be enrolled<font color="#CCCCCC"> in the course you if you're</font>

868
00:49:54,410 --> 00:49:56,030
not<font color="#CCCCCC"> enroll in the course</font><font color="#E5E5E5"> just sit and</font>

869
00:49:56,030 --> 00:49:58,250
<font color="#E5E5E5">relax</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> over the shoulder of somebody</font>

870
00:49:58,250 --> 00:50:01,300
it's not<font color="#CCCCCC"> cheating</font><font color="#E5E5E5"> if you do</font>

871
00:50:41,349 --> 00:50:51,109
so the good<font color="#CCCCCC"> news is I think</font><font color="#E5E5E5"> this is you</font>

872
00:50:51,109 --> 00:50:52,940
guys<font color="#CCCCCC"> here right and the quiz answer is</font>

873
00:50:52,940 --> 00:51:11,809
wrong<font color="#E5E5E5"> so basically everyone say I can</font>

874
00:51:11,809 --> 00:51:14,180
also see<font color="#E5E5E5"> you guys all it's you you're</font>

875
00:51:14,180 --> 00:51:17,950
<font color="#CCCCCC">the most part did</font><font color="#E5E5E5"> really well so</font>

876
00:51:34,670 --> 00:51:38,880
so I'm pleased to see<font color="#CCCCCC"> that this stuff is</font>

877
00:51:38,880 --> 00:51:41,490
is for the<font color="#E5E5E5"> most part you guys have seen</font>

878
00:51:41,490 --> 00:51:44,610
it<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> assume that anyone who got a</font>

879
00:51:44,610 --> 00:51:47,580
<font color="#CCCCCC">romancer is more just</font><font color="#E5E5E5"> to the misfit</font><font color="#CCCCCC"> time</font>

880
00:51:47,580 --> 00:51:53,010
<font color="#CCCCCC">it's and so what will keep</font><font color="#E5E5E5"> this is an</font>

881
00:51:53,010 --> 00:51:55,110
experiment<font color="#CCCCCC"> I know that people</font><font color="#E5E5E5"> use this</font>

882
00:51:55,110 --> 00:51:57,900
technology<font color="#CCCCCC"> successful in classes so I</font>

883
00:51:57,900 --> 00:51:59,760
want<font color="#E5E5E5"> to give it a</font><font color="#CCCCCC"> chance</font><font color="#E5E5E5"> to sort of but</font>

884
00:51:59,760 --> 00:52:06,120
it<font color="#CCCCCC"> shake out so getting back to the</font>

885
00:52:06,120 --> 00:52:09,660
matters<font color="#CCCCCC"> at hand then there's a</font><font color="#E5E5E5"> sort of</font>

886
00:52:09,660 --> 00:52:14,180
quirky question<font color="#CCCCCC"> Mike</font><font color="#E5E5E5"> and see</font>

887
00:52:59,990 --> 00:53:05,910
and see<font color="#E5E5E5"> it's possible when you just say</font>

888
00:53:05,910 --> 00:53:08,730
int it's a<font color="#E5E5E5"> a signed number can be</font>

889
00:53:08,730 --> 00:53:11,310
<font color="#E5E5E5">positive potentially can</font><font color="#CCCCCC"> be negative on</font>

890
00:53:11,310 --> 00:53:13,859
most machines but not all not guaranteed

891
00:53:13,859 --> 00:53:15,210
it would be<font color="#E5E5E5"> represented as a two's</font>

892
00:53:15,210 --> 00:53:18,270
complement<font color="#CCCCCC"> numbers</font><font color="#E5E5E5"> it can</font><font color="#CCCCCC"> alter the</font>

893
00:53:18,270 --> 00:53:21,750
<font color="#E5E5E5">quitter a a a datatype</font><font color="#CCCCCC"> an unsigned</font>

894
00:53:21,750 --> 00:53:24,740
datatype<font color="#CCCCCC"> implicitly it will be an int</font>

895
00:53:24,740 --> 00:53:27,270
it's redundant but<font color="#E5E5E5"> you can also say</font>

896
00:53:27,270 --> 00:53:31,020
unsigned int so I can can't use casting

897
00:53:31,020 --> 00:53:35,580
<font color="#CCCCCC">ah to convert from a two's complement</font>

898
00:53:35,580 --> 00:53:39,210
number to a unsigned number and you can

899
00:53:39,210 --> 00:53:42,030
imagine<font color="#E5E5E5"> various conventions</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> one of</font>

900
00:53:42,030 --> 00:53:44,940
the when<font color="#E5E5E5"> you might imagine</font><font color="#CCCCCC"> about this</font>

901
00:53:44,940 --> 00:53:47,369
<font color="#E5E5E5">would be implemented to say well minus</font>

902
00:53:47,369 --> 00:53:49,380
<font color="#CCCCCC">one is a</font><font color="#E5E5E5"> negative number and I can't</font>

903
00:53:49,380 --> 00:53:51,589
<font color="#CCCCCC">represent that</font><font color="#E5E5E5"> it's an unsigned number</font>

904
00:53:51,589 --> 00:53:54,119
but I could give me a<font color="#E5E5E5"> zero and it's all</font>

905
00:53:54,119 --> 00:53:56,580
<font color="#CCCCCC">me off by</font><font color="#E5E5E5"> one should be good</font><font color="#CCCCCC"> enough</font>

906
00:53:56,580 --> 00:53:59,490
<font color="#CCCCCC">through partial present right so you</font>

907
00:53:59,490 --> 00:54:01,140
might think<font color="#E5E5E5"> that's what it</font><font color="#CCCCCC"> would do but</font>

908
00:54:01,140 --> 00:54:04,859
it does it does<font color="#CCCCCC"> anyone know in what</font><font color="#E5E5E5"> on</font>

909
00:54:04,859 --> 00:54:06,839
most machines this value will be what

910
00:54:06,839 --> 00:54:15,900
you will<font color="#CCCCCC"> end</font><font color="#E5E5E5"> up being yes almost</font><font color="#CCCCCC"> two to</font>

911
00:54:15,900 --> 00:54:18,900
the thirty one that's it's actually<font color="#E5E5E5"> 2</font><font color="#CCCCCC"> to</font>

912
00:54:18,900 --> 00:54:22,410
the<font color="#E5E5E5"> 32nd minus</font><font color="#CCCCCC"> 1 right it's like if you</font>

913
00:54:22,410 --> 00:54:25,490
<font color="#CCCCCC">imagine an unsigned number of all ones</font>

914
00:54:25,490 --> 00:54:29,000
which is what minus one looks<font color="#E5E5E5"> like</font>

915
00:54:29,000 --> 00:54:31,560
that's<font color="#E5E5E5"> the number that</font><font color="#CCCCCC"> it will be so</font>

916
00:54:31,560 --> 00:54:35,430
<font color="#E5E5E5">that's the right</font><font color="#CCCCCC"> idea so yes exactly</font>

917
00:54:35,430 --> 00:54:37,650
<font color="#E5E5E5">that's the main idea</font><font color="#CCCCCC"> and it's kind of a</font>

918
00:54:37,650 --> 00:54:42,089
weird idea to<font color="#E5E5E5"> think about but in demo</font>

919
00:54:42,089 --> 00:54:45,119
what happens when you cast and see

920
00:54:45,119 --> 00:54:47,900
between signed and unsigned

921
00:54:47,900 --> 00:54:53,450
<font color="#E5E5E5">is nothing the bits just stay the</font><font color="#CCCCCC"> same</font>

922
00:54:53,450 --> 00:54:55,549
it's just<font color="#E5E5E5"> all of a sudden I</font><font color="#CCCCCC"> think of</font>

923
00:54:55,549 --> 00:54:57,619
that<font color="#CCCCCC"> I order bits either positive or</font>

924
00:54:57,619 --> 00:54:59,809
negative<font color="#CCCCCC"> weight depending on whether I'm</font>

925
00:54:59,809 --> 00:55:01,069
thinking<font color="#CCCCCC"> about it is signed</font><font color="#E5E5E5"> or unsigned</font>

926
00:55:01,069 --> 00:55:03,079
<font color="#E5E5E5">but nothing changes</font>

927
00:55:03,079 --> 00:55:06,200
it's a bit like really<font color="#E5E5E5"> a way different</font>

928
00:55:06,200 --> 00:55:32,029
idea<font color="#E5E5E5"> but if I say it's a</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> cover</font>

929
00:55:32,029 --> 00:55:35,900
<font color="#CCCCCC">14-point a week from today if I say</font>

930
00:55:35,900 --> 00:55:37,960
<font color="#E5E5E5">something is a floating-point</font><font color="#CCCCCC"> number and</font>

931
00:55:37,960 --> 00:55:41,000
then I convert it<font color="#CCCCCC"> to an int</font><font color="#E5E5E5"> then</font>

932
00:55:41,000 --> 00:55:42,859
something really<font color="#E5E5E5"> happens the bits really</font>

933
00:55:42,859 --> 00:55:45,770
change and that's actually<font color="#E5E5E5"> a fairly</font>

934
00:55:45,770 --> 00:55:48,140
important concept<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> we'll</font>

935
00:55:48,140 --> 00:55:52,039
disconnect<font color="#E5E5E5"> well keep track of these this</font>

936
00:55:52,039 --> 00:55:54,619
special case<font color="#CCCCCC"> of between</font><font color="#E5E5E5"> unsigned and</font>

937
00:55:54,619 --> 00:55:57,559
signed this is<font color="#E5E5E5"> truancy and in</font><font color="#CCCCCC"> both</font>

938
00:55:57,559 --> 00:55:59,119
<font color="#CCCCCC">southern</font><font color="#E5E5E5"> languages that support an</font>

939
00:55:59,119 --> 00:56:03,710
unsigned datatype<font color="#E5E5E5"> so this idea is you</font>

940
00:56:03,710 --> 00:56:05,329
<font color="#CCCCCC">know logically what we can</font><font color="#E5E5E5"> think of it</font>

941
00:56:05,329 --> 00:56:11,930
is<font color="#E5E5E5"> we're going to take</font><font color="#CCCCCC"> a number</font><font color="#E5E5E5"> that's</font>

942
00:56:11,930 --> 00:56:14,539
<font color="#CCCCCC">potentially negative and morph it into</font>

943
00:56:14,539 --> 00:56:20,059
one that's definitely not negative<font color="#CCCCCC"> but</font>

944
00:56:20,059 --> 00:56:22,220
the rule we're<font color="#CCCCCC"> going to do is basically</font>

945
00:56:22,220 --> 00:56:24,500
to keep the<font color="#E5E5E5"> bits the same and really</font>

946
00:56:24,500 --> 00:56:26,299
just<font color="#CCCCCC"> change</font><font color="#E5E5E5"> the numerical value</font>

947
00:56:26,299 --> 00:56:28,279
associated with them and the<font color="#CCCCCC"> same is</font>

948
00:56:28,279 --> 00:56:31,190
true<font color="#E5E5E5"> in the reverse direction so if we</font>

949
00:56:31,190 --> 00:56:36,680
look<font color="#E5E5E5"> at our little table going left to</font>

950
00:56:36,680 --> 00:56:42,440
<font color="#CCCCCC">right or right to well if they're both</font>

951
00:56:42,440 --> 00:56:44,690
<font color="#E5E5E5">in the range where</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> high order bit is</font>

952
00:56:44,690 --> 00:56:49,420
0 then the numeric values are<font color="#CCCCCC"> the same</font>

953
00:56:49,420 --> 00:56:54,650
<font color="#E5E5E5">but if we're going in the range where</font>

954
00:56:54,650 --> 00:56:57,589
the high order bit isn't<font color="#E5E5E5"> one then we're</font>

955
00:56:57,589 --> 00:56:58,860
either increasing

956
00:56:58,860 --> 00:57:01,260
decreasing the<font color="#CCCCCC"> number by sixteen</font><font color="#E5E5E5"> or two</font>

957
00:57:01,260 --> 00:57:09,090
to the<font color="#E5E5E5"> W in this case and what that</font>

958
00:57:09,090 --> 00:57:11,160
means<font color="#E5E5E5"> from a certain pictorial point of</font>

959
00:57:11,160 --> 00:57:13,560
view is we're taking the the green range

960
00:57:13,560 --> 00:57:18,510
of numbers<font color="#CCCCCC"> the smaller or magnitude</font>

961
00:57:18,510 --> 00:57:23,730
numbers and<font color="#E5E5E5"> where we're keeping</font><font color="#CCCCCC"> them the</font>

962
00:57:23,730 --> 00:57:25,800
same but the numbers that were<font color="#E5E5E5"> very</font>

963
00:57:25,800 --> 00:57:28,830
negative<font color="#E5E5E5"> before become very positive now</font>

964
00:57:28,830 --> 00:57:32,310
<font color="#E5E5E5">and then the same</font><font color="#CCCCCC"> is in the</font><font color="#E5E5E5"> reverse</font>

965
00:57:32,310 --> 00:57:34,500
direction in the<font color="#CCCCCC"> other way</font><font color="#E5E5E5"> and then this</font>

966
00:57:34,500 --> 00:57:37,190
<font color="#E5E5E5">actually can have some kind of strange</font>

967
00:57:37,190 --> 00:57:47,520
behaviors as a result and in<font color="#E5E5E5"> fact it can</font>

968
00:57:47,520 --> 00:57:51,200
lead to<font color="#E5E5E5"> some some really unpleasant</font>

969
00:57:51,200 --> 00:57:54,540
results<font color="#E5E5E5"> if you're not aware of it or</font>

970
00:57:54,540 --> 00:57:56,040
prepared for it

971
00:57:56,040 --> 00:57:58,590
<font color="#E5E5E5">and in fact you'll</font><font color="#CCCCCC"> find in</font><font color="#E5E5E5"> some</font>

972
00:57:58,590 --> 00:58:00,450
languages<font color="#CCCCCC"> like Java does not even</font><font color="#E5E5E5"> have</font>

973
00:58:00,450 --> 00:58:02,490
<font color="#E5E5E5">an unsigned</font><font color="#CCCCCC"> datatype because there's so</font>

974
00:58:02,490 --> 00:58:08,910
many<font color="#CCCCCC"> carols at that time so as I've been</font>

975
00:58:08,910 --> 00:58:10,530
showing with my notation<font color="#E5E5E5"> you can</font>

976
00:58:10,530 --> 00:58:14,250
explicitly<font color="#E5E5E5"> do casting to convert but</font>

977
00:58:14,250 --> 00:58:15,810
<font color="#CCCCCC">that's also what's</font><font color="#E5E5E5"> called implicit</font>

978
00:58:15,810 --> 00:58:20,250
casting for example if I have EC<font color="#CCCCCC"> on the</font>

979
00:58:20,250 --> 00:58:27,630
bottom they if I just<font color="#E5E5E5"> say you act some</font>

980
00:58:27,630 --> 00:58:29,820
unsigned value and I assign<font color="#CCCCCC"> it to a</font>

981
00:58:29,820 --> 00:58:34,290
signed<font color="#E5E5E5"> in it will do this it's implicit</font>

982
00:58:34,290 --> 00:58:36,600
casting<font color="#E5E5E5"> and of course in this case</font>

983
00:58:36,600 --> 00:58:39,210
nothing<font color="#E5E5E5"> really happens because the bits</font>

984
00:58:39,210 --> 00:58:43,250
stay the same but logically<font color="#E5E5E5"> I'm</font>

985
00:58:43,250 --> 00:58:45,780
converting in some way between<font color="#E5E5E5"> an</font>

986
00:58:45,780 --> 00:58:48,110
unsigned number and a<font color="#E5E5E5"> signed number here</font>

987
00:58:48,110 --> 00:58:50,790
<font color="#E5E5E5">without anything being obvious that</font>

988
00:58:50,790 --> 00:58:54,240
<font color="#E5E5E5">that's going on similarly you can have a</font>

989
00:58:54,240 --> 00:58:58,050
<font color="#E5E5E5">function that takes an unsigned argument</font>

990
00:58:58,050 --> 00:59:00,810
and casted a<font color="#E5E5E5"> signed value it might</font>

991
00:59:00,810 --> 00:59:02,610
return a<font color="#CCCCCC"> signed value</font><font color="#E5E5E5"> and you could</font>

992
00:59:02,610 --> 00:59:04,620
assign it to an unsigned value and those

993
00:59:04,620 --> 00:59:06,630
<font color="#E5E5E5">are all</font><font color="#CCCCCC"> casts that get applied</font>

994
00:59:06,630 --> 00:59:10,150
automatically from one feel

995
00:59:10,150 --> 00:59:13,720
and so again<font color="#CCCCCC"> that can cause some</font>

996
00:59:13,720 --> 00:59:20,650
confusion<font color="#CCCCCC"> just to give</font><font color="#E5E5E5"> you a</font><font color="#CCCCCC"> suti</font>

997
00:59:20,650 --> 00:59:24,119
illustration of of why this can<font color="#E5E5E5"> matter</font>

998
00:59:24,119 --> 00:59:27,700
one of the the quirks<font color="#E5E5E5"> of the language</font>

999
00:59:27,700 --> 00:59:30,999
that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know why they came up</font><font color="#CCCCCC"> with</font>

1000
00:59:30,999 --> 00:59:33,490
this convention<font color="#E5E5E5"> but they did is if</font>

1001
00:59:33,490 --> 00:59:35,170
you're doing any<font color="#CCCCCC"> operations where one</font>

1002
00:59:35,170 --> 00:59:37,569
<font color="#CCCCCC">argument is a sign that the other is</font>

1003
00:59:37,569 --> 00:59:41,589
unsigned<font color="#E5E5E5"> then the row is you</font>

1004
00:59:41,589 --> 00:59:43,690
automatically convert<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sign number</font>

1005
00:59:43,690 --> 00:59:45,519
to an unsigned one and then continue the

1006
00:59:45,519 --> 00:59:48,339
operation<font color="#E5E5E5"> and that applies to addition</font>

1007
00:59:48,339 --> 00:59:51,009
multiplication and things but<font color="#E5E5E5"> also to</font>

1008
00:59:51,009 --> 00:59:53,440
comparison operations like<font color="#E5E5E5"> less</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> and</font>

1009
00:59:53,440 --> 00:59:56,529
greater than<font color="#E5E5E5"> so just to illustrate what</font>

1010
00:59:56,529 --> 00:59:59,109
I'm talking about<font color="#CCCCCC"> these examples show</font>

1011
00:59:59,109 --> 01:00:01,950
some what might be surprising results

1012
01:00:01,950 --> 01:00:06,299
and I'll mention in see again that

1013
01:00:06,299 --> 01:00:09,749
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> you write as a decimal number</font>

1014
01:00:09,749 --> 01:00:14,619
is by default<font color="#E5E5E5"> signed unless he put at</font>

1015
01:00:14,619 --> 01:00:16,900
you that can<font color="#E5E5E5"> be their upper or</font><font color="#CCCCCC"> lowercase</font>

1016
01:00:16,900 --> 01:00:21,970
<font color="#CCCCCC">u at the end of it so for</font><font color="#E5E5E5"> example if I'm</font>

1017
01:00:21,970 --> 01:00:27,730
comparing<font color="#E5E5E5"> zero the sign number to zero</font>

1018
01:00:27,730 --> 01:00:31,480
<font color="#E5E5E5">the unsigned number what would the</font>

1019
01:00:31,480 --> 01:00:40,450
relative values of<font color="#CCCCCC"> those be well they're</font>

1020
01:00:40,450 --> 01:00:43,029
equal<font color="#E5E5E5"> right because they're both if you</font>

1021
01:00:43,029 --> 01:00:44,799
think of it<font color="#E5E5E5"> think</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> their bit patterns</font>

1022
01:00:44,799 --> 01:00:48,670
<font color="#E5E5E5">they're all zeros and</font><font color="#CCCCCC"> anytime</font><font color="#E5E5E5"> for all</font>

1023
01:00:48,670 --> 01:00:50,859
the<font color="#E5E5E5"> numbers reasonably close</font><font color="#CCCCCC"> to zero</font>

1024
01:00:50,859 --> 01:00:52,720
<font color="#E5E5E5">there's no difference between the</font>

1025
01:00:52,720 --> 01:00:54,009
unsigned in two's complement

1026
01:00:54,009 --> 01:01:00,700
representation and you'll see on the the

1027
01:01:00,700 --> 01:01:02,680
<font color="#CCCCCC">right-hand side it's key to understand</font>

1028
01:01:02,680 --> 01:01:06,369
how is this<font color="#E5E5E5"> expression evaluated and so</font>

1029
01:01:06,369 --> 01:01:08,829
what's<font color="#E5E5E5"> really</font><font color="#CCCCCC"> happening is since this</font>

1030
01:01:08,829 --> 01:01:11,470
right-hand argument is a expressed

1031
01:01:11,470 --> 01:01:14,019
explicitly<font color="#E5E5E5"> as an unsigned number I'm</font>

1032
01:01:14,019 --> 01:01:16,470
infinitely<font color="#E5E5E5"> going to cast this</font>

1033
01:01:16,470 --> 01:01:20,359
<font color="#E5E5E5">to an unsigned number do the comparison</font>

1034
01:01:20,359 --> 01:01:24,810
so<font color="#E5E5E5"> if I compare minus 1 to 0 it will be</font>

1035
01:01:24,810 --> 01:01:29,609
less greater or equal that's right

1036
01:01:29,609 --> 01:01:33,090
obviously but what if now I put a<font color="#CCCCCC"> little</font>

1037
01:01:33,090 --> 01:01:35,330
you on that<font color="#E5E5E5"> zero</font>

1038
01:01:35,330 --> 01:01:46,380
I didn't change<font color="#E5E5E5"> the bits remember it's</font>

1039
01:01:46,380 --> 01:01:50,220
gonna<font color="#E5E5E5"> quit there what's going on it's</font>

1040
01:01:50,220 --> 01:01:52,260
flipping<font color="#CCCCCC"> because remember if I turn a</font>

1041
01:01:52,260 --> 01:01:54,480
minus<font color="#CCCCCC"> one into an unsigned number which</font>

1042
01:01:54,480 --> 01:01:57,180
I will for this<font color="#CCCCCC"> comparison because</font>

1043
01:01:57,180 --> 01:01:58,740
<font color="#E5E5E5">there's an</font><font color="#CCCCCC"> unsigned on birds here</font><font color="#E5E5E5"> their</font>

1044
01:01:58,740 --> 01:02:01,470
argument<font color="#E5E5E5"> all of a sudden that minus 1</font>

1045
01:02:01,470 --> 01:02:07,740
becomes and so it will become<font color="#E5E5E5"> a</font><font color="#CCCCCC"> very</font>

1046
01:02:07,740 --> 01:02:09,780
large<font color="#E5E5E5"> number compared to</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> that will be</font>

1047
01:02:09,780 --> 01:02:18,450
<font color="#E5E5E5">greater what if I compare this we</font>

1048
01:02:18,450 --> 01:02:25,200
<font color="#E5E5E5">recognize his TV in and this will</font>

1049
01:02:25,200 --> 01:02:28,020
recognize it I'm<font color="#E5E5E5"> tight this is</font><font color="#CCCCCC"> Tmax</font>

1050
01:02:28,020 --> 01:02:30,180
<font color="#E5E5E5">biggest</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> complement number and this</font>

1051
01:02:30,180 --> 01:02:33,150
<font color="#E5E5E5">is team n the most negative cheese</font>

1052
01:02:33,150 --> 01:02:35,570
<font color="#CCCCCC">complement number what</font><font color="#E5E5E5"> the relation will</font>

1053
01:02:35,570 --> 01:02:40,380
between that greater<font color="#E5E5E5"> right it's positive</font>

1054
01:02:40,380 --> 01:02:48,000
<font color="#E5E5E5">number is</font><font color="#CCCCCC"> greater than</font><font color="#E5E5E5"> oh but what if I</font>

1055
01:02:48,000 --> 01:02:50,540
put in you

1056
01:02:55,040 --> 01:03:18,240
yes<font color="#E5E5E5"> be like so in</font><font color="#CCCCCC"> this case it's gonna</font>

1057
01:03:18,240 --> 01:03:21,960
try it see if<font color="#E5E5E5"> this works</font><font color="#CCCCCC"> I don't really</font>

1058
01:03:21,960 --> 01:03:24,980
have like<font color="#E5E5E5"> a blank sheet of paper though</font>

1059
01:03:24,980 --> 01:03:55,020
so anyways what's giving away all the

1060
01:03:55,020 --> 01:03:59,640
cool<font color="#E5E5E5"> stuff but this one's pretty</font>

1061
01:03:59,640 --> 01:04:06,260
important<font color="#E5E5E5"> remember that</font>

1062
01:04:09,250 --> 01:04:43,630
it's what I<font color="#E5E5E5"> want to do and this one the</font>

1063
01:04:43,630 --> 01:04:47,020
bit pattern is a<font color="#E5E5E5"> one followed</font><font color="#CCCCCC"> by a bunch</font>

1064
01:04:47,020 --> 01:04:53,650
<font color="#E5E5E5">of</font><font color="#CCCCCC"> zeros</font><font color="#E5E5E5"> and so if it's a unsigned</font>

1065
01:04:53,650 --> 01:04:56,950
comparison<font color="#E5E5E5"> then the left one is smaller</font>

1066
01:04:56,950 --> 01:04:59,920
<font color="#E5E5E5">than the</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> but if it's a</font><font color="#CCCCCC"> sign</font>

1067
01:04:59,920 --> 01:05:01,869
comparison then the last part<font color="#E5E5E5"> is a</font>

1068
01:05:01,869 --> 01:05:04,359
positive number<font color="#CCCCCC"> and the right one is a</font>

1069
01:05:04,359 --> 01:05:27,609
<font color="#E5E5E5">negative number</font><font color="#CCCCCC"> and so it's and and</font>

1070
01:05:27,609 --> 01:05:30,910
<font color="#CCCCCC">soco's you can see these other examples</font>

1071
01:05:30,910 --> 01:05:34,560
<font color="#CCCCCC">are all instances of them</font>

1072
01:05:41,359 --> 01:05:44,939
so this<font color="#E5E5E5"> always sort of a abstract thing</font>

1073
01:05:44,939 --> 01:05:48,989
like so it's it's actually<font color="#E5E5E5"> a really good</font>

1074
01:05:48,989 --> 01:05:53,549
source of exam<font color="#CCCCCC"> questions but I won't let</font>

1075
01:05:53,549 --> 01:05:54,449
you worry about<font color="#CCCCCC"> it</font>

1076
01:05:54,449 --> 01:05:58,099
quite yet but it actually is a risk that

1077
01:05:58,099 --> 01:06:01,499
happens in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> life programs that when</font>

1078
01:06:01,499 --> 01:06:03,989
you start using unsigned<font color="#CCCCCC"> there are</font>

1079
01:06:03,989 --> 01:06:06,779
certain things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you might be</font>

1080
01:06:06,779 --> 01:06:09,140
accustomed to<font color="#E5E5E5"> that you no</font><font color="#CCCCCC"> longer can do</font>

1081
01:06:09,140 --> 01:06:11,609
so for<font color="#CCCCCC"> example imagine</font><font color="#E5E5E5"> I have an</font>

1082
01:06:11,609 --> 01:06:15,539
unsigned loop variable<font color="#CCCCCC"> I</font><font color="#E5E5E5"> and I wanted to</font>

1083
01:06:15,539 --> 01:06:19,439
<font color="#E5E5E5">do a countdown</font><font color="#CCCCCC"> I want to keep basically</font>

1084
01:06:19,439 --> 01:06:26,599
what's<font color="#E5E5E5"> called up some I want to take the</font>

1085
01:06:26,599 --> 01:06:29,309
values of<font color="#E5E5E5"> an array and keep adding</font>

1086
01:06:29,309 --> 01:06:35,789
backward<font color="#CCCCCC"> back to a of zero and keep</font>

1087
01:06:35,789 --> 01:06:37,650
accumulating the values<font color="#CCCCCC"> backwards</font><font color="#E5E5E5"> so</font>

1088
01:06:37,650 --> 01:06:40,349
what's wrong<font color="#E5E5E5"> with this</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> it's like</font>

1089
01:06:40,349 --> 01:06:46,109
seriously wrong<font color="#CCCCCC"> in every it's an</font>

1090
01:06:46,109 --> 01:06:50,699
infinite<font color="#E5E5E5"> write</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> logic waits an</font>

1091
01:06:50,699 --> 01:06:53,189
infinite loop<font color="#E5E5E5"> because I is always going</font>

1092
01:06:53,189 --> 01:06:55,130
<font color="#E5E5E5">to be greater</font><font color="#CCCCCC"> equals</font><font color="#E5E5E5"> zero I said in time</font>

1093
01:06:55,130 --> 01:06:58,819
so what happens is I will<font color="#CCCCCC"> hit zero</font><font color="#E5E5E5"> and</font>

1094
01:06:58,819 --> 01:07:02,459
then you'll decrement it and what number

1095
01:07:02,459 --> 01:07:04,679
<font color="#CCCCCC">will you</font><font color="#E5E5E5"> get when you go what whole</font>

1096
01:07:04,679 --> 01:07:06,869
decrementing zero give you an unsigned

1097
01:07:06,869 --> 01:07:12,329
number yeah you max<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> give you a</font>

1098
01:07:12,329 --> 01:07:15,599
bunch<font color="#E5E5E5"> of ones so often a of I is</font><font color="#CCCCCC"> going</font>

1099
01:07:15,599 --> 01:07:19,199
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> at an address</font><font color="#E5E5E5"> it actually doesn't</font>

1100
01:07:19,199 --> 01:07:22,890
<font color="#CCCCCC">exist on any machine that's been built</font>

1101
01:07:22,890 --> 01:07:25,739
<font color="#CCCCCC">as</font><font color="#E5E5E5"> if yet because there are no true 64</font>

1102
01:07:25,739 --> 01:07:28,589
well<font color="#E5E5E5"> no it would exist on some</font><font color="#CCCCCC"> Lucien</font>

1103
01:07:28,589 --> 01:07:31,650
<font color="#CCCCCC">exactly but it's a really</font><font color="#E5E5E5"> big</font><font color="#CCCCCC"> number and</font>

1104
01:07:31,650 --> 01:07:34,609
chances<font color="#CCCCCC"> arts and out of bounds of your</font>

1105
01:07:34,609 --> 01:07:36,839
<font color="#E5E5E5">memory region and it will hit what's</font>

1106
01:07:36,839 --> 01:07:39,989
called a segmentation fault<font color="#E5E5E5"> but so</font>

1107
01:07:39,989 --> 01:07:42,509
probably<font color="#E5E5E5"> just</font><font color="#CCCCCC"> crash as opposed to run in</font>

1108
01:07:42,509 --> 01:07:45,390
an infinite loop<font color="#E5E5E5"> but in any case it</font>

1109
01:07:45,390 --> 01:07:48,449
won't do what was intended<font color="#E5E5E5"> so you look</font>

1110
01:07:48,449 --> 01:07:51,509
at that<font color="#CCCCCC"> you go yaha</font><font color="#E5E5E5"> you're kind of what</font>

1111
01:07:51,509 --> 01:07:53,440
do you<font color="#CCCCCC"> expect</font>

1112
01:07:53,440 --> 01:07:55,779
you should never<font color="#CCCCCC"> say</font><font color="#E5E5E5"> I greater equal to</font>

1113
01:07:55,779 --> 01:07:58,719
zero<font color="#E5E5E5"> because anyone can tell that's</font>

1114
01:07:58,719 --> 01:07:59,670
never going to happen

1115
01:07:59,670 --> 01:08:02,289
<font color="#E5E5E5">it can be much more</font><font color="#CCCCCC"> subtle than that</font>

1116
01:08:02,289 --> 01:08:05,140
though like way<font color="#CCCCCC"> more so here's an</font>

1117
01:08:05,140 --> 01:08:08,529
example<font color="#E5E5E5"> suppose somewhere I have this a</font>

1118
01:08:08,529 --> 01:08:13,019
number I've defined it<font color="#E5E5E5"> somewhere as</font>

1119
01:08:13,019 --> 01:08:15,999
<font color="#E5E5E5">because I don't want to keep using size</font>

1120
01:08:15,999 --> 01:08:18,460
though all<font color="#E5E5E5"> over the place so I just call</font>

1121
01:08:18,460 --> 01:08:20,649
<font color="#CCCCCC">it Delta and I want to do the same</font>

1122
01:08:20,649 --> 01:08:22,839
general<font color="#CCCCCC"> count down trick something in</font>

1123
01:08:22,839 --> 01:08:26,109
this same<font color="#CCCCCC"> way I want to</font><font color="#E5E5E5"> keep working</font>

1124
01:08:26,109 --> 01:08:31,810
<font color="#E5E5E5">this down and</font><font color="#CCCCCC"> so within some range</font><font color="#E5E5E5"> close</font>

1125
01:08:31,810 --> 01:08:34,719
to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> but Delta is a positive</font><font color="#CCCCCC"> numbers</font>

1126
01:08:34,719 --> 01:08:40,868
<font color="#CCCCCC">so I'm not actually</font><font color="#E5E5E5"> gonna ever let I go</font>

1127
01:08:40,868 --> 01:08:43,599
below<font color="#E5E5E5"> zero and I was assigned number in</font>

1128
01:08:43,599 --> 01:08:45,330
the first place so<font color="#CCCCCC"> that should be</font><font color="#E5E5E5"> fine</font>

1129
01:08:45,330 --> 01:08:49,029
<font color="#E5E5E5">so</font><font color="#CCCCCC"> yeah you might</font><font color="#E5E5E5"> want to guess what</font>

1130
01:08:49,029 --> 01:09:00,279
happens with<font color="#E5E5E5"> this go yeah right</font><font color="#CCCCCC"> very</font>

1131
01:09:00,279 --> 01:09:00,549
good

1132
01:09:00,549 --> 01:09:03,460
so there's a<font color="#E5E5E5"> couple things going on</font><font color="#CCCCCC"> here</font>

1133
01:09:03,460 --> 01:09:12,670
if you<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> the NC</font><font color="#E5E5E5"> sizeof</font>

1134
01:09:12,670 --> 01:09:16,599
operator<font color="#E5E5E5"> which is a pretty important</font>

1135
01:09:16,599 --> 01:09:20,069
operator it returns a value<font color="#E5E5E5"> of</font><font color="#CCCCCC"> type size</font>

1136
01:09:20,069 --> 01:09:24,368
underscore<font color="#CCCCCC"> T and that's</font><font color="#E5E5E5"> defined on all</font>

1137
01:09:24,368 --> 01:09:28,389
machines<font color="#E5E5E5"> to be an unsigned number that</font>

1138
01:09:28,389 --> 01:09:31,899
sort of big enough to hold an arbitrary

1139
01:09:31,899 --> 01:09:36,310
a range of<font color="#E5E5E5"> values for for a data type so</font>

1140
01:09:36,310 --> 01:09:39,549
it would be<font color="#E5E5E5"> either</font><font color="#CCCCCC"> to the 32 on</font><font color="#E5E5E5"> it when</font>

1141
01:09:39,549 --> 01:09:44,158
you're running 32 bits or<font color="#CCCCCC"> two to</font><font color="#E5E5E5"> the 64</font>

1142
01:09:44,158 --> 01:09:47,170
range<font color="#E5E5E5"> but the point is it's an unsigned</font>

1143
01:09:47,170 --> 01:09:50,408
note it's always an unsigned<font color="#CCCCCC"> note and so</font>

1144
01:09:50,408 --> 01:09:52,779
Delta<font color="#CCCCCC"> is unsigned and now as</font><font color="#E5E5E5"> you just</font>

1145
01:09:52,779 --> 01:09:55,690
said<font color="#E5E5E5"> so when I subtract Delta from I I</font>

1146
01:09:55,690 --> 01:10:00,550
do this implicit casting trick and so

1147
01:10:00,550 --> 01:10:03,730
the result will<font color="#CCCCCC"> be unsigned</font><font color="#E5E5E5"> even though</font>

1148
01:10:03,730 --> 01:10:04,930
it<font color="#E5E5E5"> started with a sign</font>

1149
01:10:04,930 --> 01:10:07,480
and I subtracted a constant<font color="#E5E5E5"> from it all</font>

1150
01:10:07,480 --> 01:10:09,130
of a<font color="#CCCCCC"> sudden it magically</font><font color="#E5E5E5"> into the eyes</font>

1151
01:10:09,130 --> 01:10:12,250
of the C<font color="#E5E5E5"> language becomes an unsigned</font>

1152
01:10:12,250 --> 01:10:14,320
number and so it's the<font color="#E5E5E5"> same problem as</font>

1153
01:10:14,320 --> 01:10:17,950
before<font color="#E5E5E5"> it's never less</font><font color="#CCCCCC"> than zero and so</font>

1154
01:10:17,950 --> 01:10:19,420
it<font color="#E5E5E5"> gets into the same problem as before</font>

1155
01:10:19,420 --> 01:10:25,150
<font color="#E5E5E5">so my point being that these kind of and</font>

1156
01:10:25,150 --> 01:10:27,370
it's the<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> that you can stare</font>

1157
01:10:27,370 --> 01:10:31,510
at<font color="#E5E5E5"> this for</font><font color="#CCCCCC"> hours because</font><font color="#E5E5E5"> mentally it's</font>

1158
01:10:31,510 --> 01:10:34,240
hard to remember<font color="#E5E5E5"> this particular quirk</font>

1159
01:10:34,240 --> 01:10:38,110
of<font color="#E5E5E5"> the language</font><font color="#CCCCCC"> and so these</font><font color="#E5E5E5"> are</font>

1160
01:10:38,110 --> 01:10:40,060
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> difficult types of bugs to</font>

1161
01:10:40,060 --> 01:10:47,800
deal<font color="#CCCCCC"> okay</font>

1162
01:10:47,800 --> 01:10:52,300
well we'll<font color="#CCCCCC"> keep on looking at these sort</font>

1163
01:10:52,300 --> 01:10:54,190
<font color="#CCCCCC">of</font><font color="#E5E5E5"> different representations</font><font color="#CCCCCC"> and what</font>

1164
01:10:54,190 --> 01:10:57,550
they mean<font color="#CCCCCC"> oh so as I've mentioned before</font>

1165
01:10:57,550 --> 01:11:01,150
<font color="#E5E5E5">they we see already</font><font color="#CCCCCC"> cases where we have</font>

1166
01:11:01,150 --> 01:11:02,980
some things or<font color="#CCCCCC"> eight debts some things</font>

1167
01:11:02,980 --> 01:11:05,170
you<font color="#CCCCCC"> sixteen summer thirty-two and summer</font>

1168
01:11:05,170 --> 01:11:07,240
<font color="#CCCCCC">sixty-four and so there's</font><font color="#E5E5E5"> quite a few</font>

1169
01:11:07,240 --> 01:11:09,580
operations it for one<font color="#E5E5E5"> reason another</font>

1170
01:11:09,580 --> 01:11:13,240
<font color="#E5E5E5">have to a go between those different</font>

1171
01:11:13,240 --> 01:11:19,540
sizes and so the<font color="#E5E5E5"> general</font><font color="#CCCCCC"> rule for</font><font color="#E5E5E5"> at</font>

1172
01:11:19,540 --> 01:11:21,370
least<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> sign numbers from going</font>

1173
01:11:21,370 --> 01:11:23,530
<font color="#E5E5E5">from a smaller representation to larger</font>

1174
01:11:23,530 --> 01:11:25,990
one is to do what's<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the sign</font>

1175
01:11:25,990 --> 01:11:29,830
<font color="#E5E5E5">extension which again</font><font color="#CCCCCC"> often might not</font>

1176
01:11:29,830 --> 01:11:32,800
seem like<font color="#E5E5E5"> a very useful thing but the</font>

1177
01:11:32,800 --> 01:11:34,660
idea of sign extension<font color="#E5E5E5"> when you're going</font>

1178
01:11:34,660 --> 01:11:37,150
<font color="#E5E5E5">from a smaller word size to larger one</font>

1179
01:11:37,150 --> 01:11:39,910
is if you keep replicating that leftmost

1180
01:11:39,910 --> 01:11:43,960
<font color="#CCCCCC">or sign bit and the reason for doing</font>

1181
01:11:43,960 --> 01:11:46,240
that<font color="#CCCCCC"> is with this two's complement</font>

1182
01:11:46,240 --> 01:11:48,880
representation<font color="#CCCCCC"> what it will do is it</font>

1183
01:11:48,880 --> 01:11:52,810
will<font color="#E5E5E5"> preserve numeric values so just as</font>

1184
01:11:52,810 --> 01:11:55,690
an example<font color="#E5E5E5"> if I'm taking a five bit</font>

1185
01:11:55,690 --> 01:11:59,860
number<font color="#E5E5E5"> and expand it to a sixty-six bit</font>

1186
01:11:59,860 --> 01:12:04,540
number if<font color="#E5E5E5"> that number is positive</font><font color="#CCCCCC"> I just</font>

1187
01:12:04,540 --> 01:12:08,520
want to stick<font color="#E5E5E5"> a</font><font color="#CCCCCC"> zero in because I'm just</font>

1188
01:12:09,270 --> 01:12:11,770
and you can obviously<font color="#CCCCCC"> that won't make a</font>

1189
01:12:11,770 --> 01:12:13,420
difference<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the point is that's</font>

1190
01:12:13,420 --> 01:12:16,510
<font color="#CCCCCC">actually a form of a</font><font color="#E5E5E5"> sign extent I'm</font>

1191
01:12:16,510 --> 01:12:18,030
taking the leftmost bit

1192
01:12:18,030 --> 01:12:21,230
and I'm copying it<font color="#E5E5E5"> which makes no real</font>

1193
01:12:21,230 --> 01:12:24,150
obvious difference for the positive case

1194
01:12:24,150 --> 01:12:26,550
<font color="#E5E5E5">but you see it's also the right thing to</font>

1195
01:12:26,550 --> 01:12:29,690
do on<font color="#E5E5E5"> the negative case then if I</font>

1196
01:12:29,690 --> 01:13:18,720
<font color="#E5E5E5">replicate that</font><font color="#CCCCCC"> -16</font><font color="#E5E5E5"> should be what</font>

1197
01:13:18,720 --> 01:13:27,500
success what do<font color="#E5E5E5"> people think</font>

1198
01:13:31,920 --> 01:13:40,830
<font color="#E5E5E5">right I want minus 16 plus 4 plus 2 is</font>

1199
01:13:53,040 --> 01:13:54,160
better

1200
01:13:54,160 --> 01:14:18,750
oh my god so I didn't make<font color="#E5E5E5"> up this way</font>

1201
01:14:22,200 --> 01:14:24,910
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> actually kind of</font><font color="#CCCCCC"> cute</font><font color="#E5E5E5"> this example</font>

1202
01:14:24,910 --> 01:14:26,830
is<font color="#CCCCCC"> actually a pretty interesting to</font>

1203
01:14:26,830 --> 01:14:29,110
think about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> logic behind this</font><font color="#E5E5E5"> so I</font>

1204
01:14:29,110 --> 01:14:31,000
want to<font color="#E5E5E5"> make sure that the details are</font>

1205
01:14:31,000 --> 01:14:41,440
<font color="#E5E5E5">right</font><font color="#CCCCCC"> but look</font><font color="#E5E5E5"> at the this case here you</font>

1206
01:14:41,440 --> 01:14:45,910
<font color="#CCCCCC">see what happened is in this 5 bit</font>

1207
01:14:45,910 --> 01:14:48,310
number<font color="#E5E5E5"> the most significant bit</font><font color="#CCCCCC"> had a</font>

1208
01:14:48,310 --> 01:14:51,900
weight of<font color="#CCCCCC"> -16 and when it becomes a</font>

1209
01:14:51,900 --> 01:14:56,110
<font color="#E5E5E5">6-bit number that</font><font color="#CCCCCC"> -16 flips be positive</font>

1210
01:14:56,110 --> 01:14:59,290
16 but on<font color="#CCCCCC"> adding another fifth year with</font>

1211
01:14:59,290 --> 01:15:03,010
weight - 32 and so both of those<font color="#CCCCCC"> are</font>

1212
01:15:03,010 --> 01:15:07,710
ones<font color="#CCCCCC"> you see it</font><font color="#E5E5E5"> kind of cancels out that</font>

1213
01:15:07,710 --> 01:15:11,230
it<font color="#E5E5E5"> cancels out with the net result of</font>

1214
01:15:11,230 --> 01:15:15,670
<font color="#CCCCCC">minus 16 and you think</font><font color="#E5E5E5"> about oh yeah</font>

1215
01:15:15,670 --> 01:15:17,950
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> actually the general principle</font>

1216
01:15:17,950 --> 01:15:21,490
behind it<font color="#CCCCCC"> and this sign extension you</font>

1217
01:15:21,490 --> 01:15:24,580
can<font color="#E5E5E5"> sign you can work it out</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

1218
01:15:24,580 --> 01:15:27,520
can sign extend as far left as you want

1219
01:15:27,520 --> 01:15:30,600
and you'll get the<font color="#E5E5E5"> same result that</font><font color="#CCCCCC"> here</font>

1220
01:15:30,600 --> 01:15:34,390
<font color="#E5E5E5">introducing a string of bits whose total</font>

1221
01:15:34,390 --> 01:15:37,900
<font color="#E5E5E5">weight sum together is equal to the</font>

1222
01:15:37,900 --> 01:15:39,690
single

1223
01:15:39,690 --> 01:15:42,060
earlier number<font color="#E5E5E5"> and so that's the logic</font>

1224
01:15:42,060 --> 01:15:44,850
between sign extension<font color="#E5E5E5"> of of how you go</font>

1225
01:15:44,850 --> 01:15:48,180
from a sign number to a larger<font color="#CCCCCC"> sign</font>

1226
01:15:48,180 --> 01:15:50,430
number<font color="#E5E5E5"> without changing the numeric</font>

1227
01:15:50,430 --> 01:15:54,330
values and that's what happens when you

1228
01:15:54,330 --> 01:15:58,710
cast<font color="#E5E5E5"> say from a short of care to an int</font>

1229
01:15:58,710 --> 01:16:01,830
it will do<font color="#E5E5E5"> that sign extension in order</font>

1230
01:16:01,830 --> 01:16:11,969
to preserve the<font color="#E5E5E5"> value there's other</font>

1231
01:16:11,969 --> 01:16:13,680
times<font color="#E5E5E5"> when we want to kind of squish</font>

1232
01:16:13,680 --> 01:16:15,390
things down we<font color="#E5E5E5"> want to take a bigger</font>

1233
01:16:15,390 --> 01:16:19,350
number<font color="#E5E5E5"> and reduce the number of</font><font color="#CCCCCC"> gets</font><font color="#E5E5E5"> one</font>

1234
01:16:19,350 --> 01:16:21,210
thing you'll think<font color="#E5E5E5"> about is first is</font>

1235
01:16:21,210 --> 01:16:24,949
wait a minute<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't do that</font>

1236
01:16:24,949 --> 01:16:27,510
that's what<font color="#E5E5E5"> quad</font><font color="#CCCCCC"> Chanin's information</font>

1237
01:16:27,510 --> 01:16:29,820
theory told me is you<font color="#CCCCCC"> know there's</font>

1238
01:16:29,820 --> 01:16:32,070
certain amount<font color="#E5E5E5"> of information and you</font>

1239
01:16:32,070 --> 01:16:37,949
can't go any smaller and that's right so

1240
01:16:37,949 --> 01:16:39,810
what happens is somehow<font color="#E5E5E5"> we're going to</font>

1241
01:16:39,810 --> 01:16:43,170
<font color="#E5E5E5">potentially lose information here it can</font>

1242
01:16:43,170 --> 01:16:45,360
<font color="#E5E5E5">be even</font><font color="#CCCCCC"> worse than that we</font><font color="#E5E5E5"> can not</font><font color="#CCCCCC"> only</font>

1243
01:16:45,360 --> 01:16:46,860
lose something but we can come<font color="#CCCCCC"> up with</font>

1244
01:16:46,860 --> 01:16:48,690
<font color="#E5E5E5">something that seems to have</font><font color="#CCCCCC"> nothing to</font>

1245
01:16:48,690 --> 01:16:50,969
do<font color="#E5E5E5"> with the earlier value but that's</font>

1246
01:16:50,969 --> 01:16:53,520
<font color="#E5E5E5">what happens when we go from a larger</font>

1247
01:16:53,520 --> 01:16:56,600
number to smaller one and in general<font color="#E5E5E5"> uh</font>

1248
01:16:56,600 --> 01:17:00,090
<font color="#CCCCCC">so</font><font color="#E5E5E5"> for example it if we're going from a</font>

1249
01:17:00,090 --> 01:17:05,489
<font color="#E5E5E5">five bit number down to four</font><font color="#CCCCCC"> and it's a</font>

1250
01:17:05,489 --> 01:17:07,530
<font color="#CCCCCC">signed number</font><font color="#E5E5E5"> what we're doing is we're</font>

1251
01:17:07,530 --> 01:17:10,380
taking<font color="#CCCCCC"> that sign bit that was before and</font>

1252
01:17:10,380 --> 01:17:12,930
we're basically tossing<font color="#E5E5E5"> that away and</font>

1253
01:17:12,930 --> 01:17:15,870
whatever<font color="#CCCCCC"> it happens to be</font><font color="#E5E5E5"> and now the</font>

1254
01:17:15,870 --> 01:17:18,060
new a most significant position all<font color="#E5E5E5"> of a</font>

1255
01:17:18,060 --> 01:17:20,850
<font color="#E5E5E5">sudden positive</font><font color="#CCCCCC"> weight to a negative</font>

1256
01:17:20,850 --> 01:17:23,310
<font color="#CCCCCC">weight and if the numbers are closing up</font>

1257
01:17:23,310 --> 01:17:27,630
<font color="#E5E5E5">to zero</font><font color="#CCCCCC"> you'll see</font><font color="#E5E5E5"> that that actually is</font>

1258
01:17:27,630 --> 01:17:29,340
<font color="#CCCCCC">just fine whether it's negative</font><font color="#E5E5E5"> or</font>

1259
01:17:29,340 --> 01:17:32,070
positive<font color="#CCCCCC"> I can basically afford to lose</font>

1260
01:17:32,070 --> 01:17:35,160
that<font color="#CCCCCC"> most significant</font><font color="#E5E5E5"> day and still</font>

1261
01:17:35,160 --> 01:17:39,090
maintain my numeric value<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like sort</font>

1262
01:17:39,090 --> 01:17:41,040
of the<font color="#E5E5E5"> inverse of the sign extension</font>

1263
01:17:41,040 --> 01:17:47,690
operation on the<font color="#E5E5E5"> other hand if if I</font>

1264
01:17:49,330 --> 01:17:53,950
if the the number I'm dropping is not

1265
01:17:53,950 --> 01:17:57,340
the same bit value is the new sign bit

1266
01:17:57,340 --> 01:18:00,010
<font color="#E5E5E5">then I'm actually going to sort of do</font>

1267
01:18:00,010 --> 01:18:04,740
<font color="#E5E5E5">strange changes</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

1268
01:18:05,910 --> 01:18:11,650
<font color="#E5E5E5">10 that one's correct</font><font color="#CCCCCC"> but if I make this</font>

1269
01:18:11,650 --> 01:18:14,440
a 4 bit number mysterious<font color="#CCCCCC"> so it's going</font>

1270
01:18:14,440 --> 01:18:15,940
<font color="#CCCCCC">to become</font><font color="#E5E5E5"> minus 6</font><font color="#CCCCCC"> but it's going</font><font color="#E5E5E5"> to</font>

1271
01:18:15,940 --> 01:18:21,090
<font color="#E5E5E5">decrease</font><font color="#CCCCCC"> by 16</font><font color="#E5E5E5"> and similarly if I take a</font>

1272
01:18:21,090 --> 01:18:27,040
negative<font color="#CCCCCC"> number which is which is minus</font>

1273
01:18:27,040 --> 01:18:31,150
10 they got this one<font color="#E5E5E5"> right and I drop</font>

1274
01:18:31,150 --> 01:18:33,880
off that that it's gonna become 6 and

1275
01:18:33,880 --> 01:18:35,770
the reason of<font color="#CCCCCC"> course is I can't</font>

1276
01:18:35,770 --> 01:18:39,490
represent<font color="#E5E5E5"> minus 10 as a four-bit 2's</font>

1277
01:18:39,490 --> 01:18:42,370
<font color="#CCCCCC">complement number my range is between</font>

1278
01:18:42,370 --> 01:18:45,490
minus<font color="#E5E5E5"> 8 and</font><font color="#CCCCCC"> positive</font><font color="#E5E5E5"> 7 in this</font>

1279
01:18:45,490 --> 01:18:48,430
<font color="#E5E5E5">representation</font><font color="#CCCCCC"> and so what I did</font><font color="#E5E5E5"> was</font>

1280
01:18:48,430 --> 01:18:52,570
basically<font color="#E5E5E5"> flip it so the point being</font>

1281
01:18:52,570 --> 01:18:57,090
that when you lose<font color="#CCCCCC"> information you can</font>

1282
01:18:57,090 --> 01:18:59,380
you're just<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> change how you think</font>

1283
01:18:59,380 --> 01:19:02,320
about<font color="#E5E5E5"> these bits and</font><font color="#CCCCCC"> it may or may not</font>

1284
01:19:02,320 --> 01:19:04,660
<font color="#E5E5E5">be the right thing to do unless the</font>

1285
01:19:04,660 --> 01:19:06,310
numbers already<font color="#E5E5E5"> fairly close cos you're</font>

1286
01:19:06,310 --> 01:19:07,140
on

1287
01:19:07,140 --> 00:00:00,000
<font color="#E5E5E5">ok then we'll do this</font><font color="#CCCCCC"> for today</font>

